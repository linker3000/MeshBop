[{"id":"6072c34b94fdbe5d","type":"tab","label":"Main Setup","disabled":false,"info":"","env":[]},{"id":"5de1779936bc2efd","type":"tab","label":"Parse received message","disabled":false,"info":"","env":[]},{"id":"69a8cbab824f40ec","type":"tab","label":"Rx / Tx","disabled":false,"info":"","env":[]},{"id":"9ac3f7bae9e19be1","type":"tab","label":"Ping / Test / Astro","disabled":false,"info":"","env":[]},{"id":"2cd572b50cf87813","type":"tab","label":"News","disabled":false,"info":"","env":[]},{"id":"7098087e5313f3ae","type":"tab","label":"Zen inspiration","disabled":false,"info":"","env":[]},{"id":"654c666c7ffd7e3a","type":"tab","label":"Met Norway Weather","disabled":false,"info":"","env":[]},{"id":"e186f0d592d0cb40","type":"tab","label":"Severe weather","disabled":false,"info":"","env":[]},{"id":"02096f24b6634fbd","type":"tab","label":"Sea & Tide Info","disabled":false,"info":""},{"id":"3ff619ad94eee667","type":"tab","label":"Dashboard","disabled":false,"info":"","env":[]},{"id":"1021e6d46fa931d6","type":"tab","label":"Open Meteo Weather","disabled":true,"info":"","env":[]},{"id":"2c9d2a03adf9c644","type":"subflow","name":"Text Chunker","info":"Splits msg.payload into chunks of up to 195 characters without breaking words. Joins with ` ..\\n.. ` separators.","category":"","in":[{"x":270,"y":140,"wires":[{"id":"a2100ab0d4adecef"}]}],"out":[{"x":510,"y":140,"wires":[{"id":"a2100ab0d4adecef","port":0}]}],"env":[{"name":"chunkSize","type":"num","value":"195"}],"meta":{},"color":"#DDAA99"},{"id":"97863d3440213bf0","type":"junction","z":"2cd572b50cf87813","x":240,"y":140,"wires":[["f2d443f503c063b1","96aba36a10939274","92d8cad719a38e98"]]},{"id":"6c990a28463c3dfe","type":"junction","z":"69a8cbab824f40ec","d":true,"x":260,"y":240,"wires":[["819fe19c9d58a829"]]},{"id":"6bb7116284e361c7","type":"serial-port","name":"","serialport":"/dev/ttyAMA0","serialbaud":"19200","databits":8,"parity":"none","stopbits":1,"waitfor":"","dtr":"none","rts":"none","cts":"none","dsr":"none","newline":"\\n","bin":"false","out":"char","addchar":"","responsetimeout":10000},{"id":"a047499d20b4fb1e","type":"ui-theme","name":"Default Theme","colors":{"surface":"#ffffff","primary":"#0094CE","bgPage":"#eeeeee","groupBg":"#ffffff","groupOutline":"#cccccc"},"sizes":{"density":"default","pagePadding":"12px","groupGap":"12px","groupBorderRadius":"4px","widgetGap":"12px"}},{"id":"0f767d2c3dfcdb48","type":"ui-base","name":"MBPBASE","path":"/dashboard","appIcon":"","includeClientData":true,"acceptsClientConfig":["ui-notification","ui-control"],"showPathInSidebar":false,"headerContent":"page","navigationStyle":"default","titleBarStyle":"default","showReconnectNotification":true,"notificationDisplayTime":1,"showDisconnectNotification":true,"allowInstall":true},{"id":"5983695cad6c9df0","type":"ui-page","name":"MeshBop for Meshtastic","ui":"0f767d2c3dfcdb48","path":"/page1","icon":"home","layout":"grid","theme":"a047499d20b4fb1e","breakpoints":[{"name":"Default","px":"0","cols":"3"},{"name":"Tablet","px":"576","cols":"6"},{"name":"Small Desktop","px":"768","cols":"9"},{"name":"Desktop","px":"1024","cols":"12"}],"order":-1,"className":"","visible":"true","disabled":"false"},{"id":"5fa2ecc6a8fe8dcc","type":"ui-group","name":"Terminal","page":"5983695cad6c9df0","width":6,"height":1,"order":1,"showTitle":true,"className":"","visible":"true","disabled":"false","groupType":"default"},{"id":"a2100ab0d4adecef","type":"function","z":"2c9d2a03adf9c644","name":"Chunk String","func":"// Chunk string by newlines and size limit from global\n//\n// V3.10 20251007\n\nlet limit = global.get(\"msgChunkSize\") || 197;  // default to 197 if not set\nlet text = msg.payload;\n\nif (typeof text !== \"string\") {\n    node.error(\"Text Chunker expects msg.payload to be a string\", msg);\n    return null;\n}\n\n// Split by explicit newlines first\nlet lines = text.split(\"\\n\");\n\nfunction splitIntoChunks(str, maxLen) {\n    let chunks = [];\n    while (str.length > maxLen) {\n        let idx = str.lastIndexOf(\" \", maxLen);\n        if (idx === -1) idx = maxLen;\n        chunks.push(str.substring(0, idx).trim());\n        str = str.substring(idx).trim();\n    }\n    if (str.length > 0) chunks.push(str.trim());\n    return chunks;\n}\n\nlet finalChunks = [];\nlines.forEach(line => {\n    if (line.length <= limit) {\n        finalChunks.push(line.trim());\n    } else {\n        finalChunks.push(...splitIntoChunks(line, limit));\n    }\n});\n\n// Send each chunk as a separate message\nfinalChunks.forEach((chunk, index) => {\n    let chunkMsg = { ...msg };\n    chunkMsg.payload = chunk;\n    chunkMsg.parts = {\n        index: index,\n        count: finalChunks.length,\n        id: msg._msgid\n    };\n    node.send(chunkMsg);\n});\n\nreturn null; // Don't send original message\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":390,"y":140,"wires":[[]]},{"id":"6b0a56c90e10f460","type":"comment","z":"2c9d2a03adf9c644","name":"Text chunker note","info":"If there is a possibility that any new flow created could\ngenerate a long output string, add this subflow between \nthe output of the flow and the Node Tx connector \nand the string will be broken into shorter, multiple messages\nat the nearest word space.\n\nBy default, the chunked message size is 197 chaacters but\nthere is a field in the function to change this. \n\n197 characters is the recommended size.\n","x":220,"y":60,"wires":[]},{"id":"02e2837ded2d55d4","type":"function","z":"6072c34b94fdbe5d","name":"** Read me, and set global variables in here before you start **","func":"/**\n * ----------------------------------------------------------------------------\n * Project: MeshBop V0.50 beta \n * Author:  Linker3000 (linker3000@gmail-dot-thingy)\n * License: Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International \n * (CC BY-NC-SA 4.0)\n *\n * You are free to:\n * - Share — copy and redistribute the material in any medium or format\n * - Adapt — remix, transform, and build upon the material\n *\n * Under the following terms:\n * - Attribution — You must give appropriate credit.\n * - NonCommercial — You may not use the material for commercial purposes.\n * - ShareAlike — If you remix, transform, or build upon the material, you \n *   must distribute your contributions under the same license.\n *\n * Full License Text: https://creativecommons.org/licenses/by-nc-sa/4.0/\n * ----------------------------------------------------------------------------\n *\n * A simple messaging system for Meshtastic that uses the TEXTMSG serial\n * function to send selected messages triggered by received messages. \n * There is also a dashboard page for sending and receiving messages.\n *\n * Read these notes carefully before changing anything.\n *\n * >>> The flows may look complex, but setup is simple if these notes and   <<<\n * >>> the ones on other tabs are followed. Each main function has notes.   <<<\n * >>> Have fun — but don’t flood your local mesh!                          <<<\n *\n * ----------------------------------------------------------------------------\n * SIMPLE SETUP\n * ----------------------------------------------------------------------------\n * 1. Read all the notes below.\n * 2. Set the global variables below.\n * 3. Configure the Email node on this tab.\n * 4. Check or modify the trigger messages on the second tab (optional).\n * 5. Test (see below).\n * 6. Enable the Async Tx node on the third tab.\n * 7. Click the 'Send report email' inject node to receive a full main \n *    variables setup report (provided email is setup properly).\n * 8. Go live.\n *\n * Optional steps (before going live):\n * - Disable the \"Trigger daily info message\" Inject node if not required \n *   (it sends an ident message at 07:00 daily by default).\n * - Add any new message triggers to the function node on the next tab.\n * - Read comments at the top of every tab.\n * - Review comments in major function nodes if you wish to customize.\n *\n * All messages are sent and received via the primary Meshtastic channel.\n * To use this app in a private group, that group MUST be the FIRST channel\n * on your Meshtastic node. See the documentation for more details.\n *\n * More setup details: https://github.com/linker3000/MeshBop\n *\n * ----------------------------------------------------------------------------\n * DISCLAIMER\n * ----------------------------------------------------------------------------\n * Accuracy and results depend on your setup and third-party services.\n * Supplied “as-is” — use at your own risk. No liability is accepted for\n * consequential loss or errors.\n *\n * Feedback is welcome at the address above or the GitHub Issues tab.\n *\n * NOTE: As of October 2025, Meshtastic firmware may transmit a spurious\n * character when the node powers on or off. This is a known issue, unrelated\n * to this application.\n *\n * ----------------------------------------------------------------------------\n * GENERAL NOTES\n * ----------------------------------------------------------------------------\n * - Some features are disabled by default.\n * - Some tabs include additional notes in the top-left corner.\n * - Enable only one tab for each type of functionality to avoid duplicate \n *   messages (e.g. weather reports).\n *   Use good quality, stable power supplies for your node and compute \n *   platform to ensure reliable operation.\n *\n * ----------------------------------------------------------------------------\n * TESTING NOTES\n * ----------------------------------------------------------------------------\n * - Disable the Async Out node on this tab before testing to prevent sending\n *   live messages. Use the debug panel to view outputs instead. Alternatively,\n *   turn off 'Transmit Enabled' on the attached node via \n *   'Radio Configuration..LoRa'.\n * - Test further in a secondary (private) channel.\n * - Re-enable the Async Out node once testing is complete, or re-enable node\n *   transmit.\n * - Some flows have rate-limiting — please respect the mesh network and don't\n *   bypass or significantly change these,\n * - This tab includes an Inject node to reset all rate limiters while testing.\n *\n * ----------------------------------------------------------------------------\n * SETUP\n * ----------------------------------------------------------------------------\n * Define global variables below. Some may be for future use.\n *\n * EMAIL SETUP:\n * If you want emails sent (e.g., severe weather alerts):\n * - Configure the email details below.\n * - Enable and test the Email node on this tab.\n *\n * OTHER REQUIREMENTS:\n * - Set serial port parameters for Meshtastic I/O nodes (must match your radio configuration).\n * - Set latitude and longitude for weather and sea state reports.\n * - Check the time function. If time is incorrect, set the host timezone:\n *   e.g., `sudo timedatectl set-timezone Europe/London`\n */\n\n/* ----------------------------------------------------------------------------\n * GLOBAL VARIABLE DEFINITIONS\n * ----------------------------------------------------------------------------\n */\n// Base trigger pattern (recommended: a slash followed by a pattern, e.g. \"/MYTRG\")\n// Do not use the same basePattern as another system in the reception locale otherwise \n// both will respond to messages. The basePattern is not associated with the connected\n// node's Meshtastic ID and they can be different, which is usually how things\n// are set up. Checks for the trigger pattern are NOT case sensitive.\nglobal.set('basePattern', '/MYTRG');\n\n// Help/info trigger (set to '' to disable help message)\nglobal.set('helpTrigger', '?');\n\n// Fixed IP address of this server (reserved for future use)\nglobal.set('myIP', '0.0.0.0');\n\n// General region name (default: London)\nglobal.set('region', 'London');\n\n// Coordinates for Astro and weather data (default: Trafalgar Square)\nglobal.set('latitude', '51.5072');   \nglobal.set('longitude', '-0.1276');  \nglobal.set('height', 10.0);  // Elevation above mean sea level (m)\n\n// A descriptive name for the location (default: Trafalgar Square)\nglobal.set('location', 'Trafalgar Square');\n\n/* ----------------------------------------------------------------------------\n * SEA CONDITIONS (OPTIONAL)\n * ----------------------------------------------------------------------------\n */\nglobal.set('seaLatitude', 50.8061);\nglobal.set('seaLongitude', -0.5453);\nglobal.set('seaLoc', '3 miles off Littlehampton');\n\n/* ----------------------------------------------------------------------------\n * TIDAL FORECAST CONFIGURATION - Based on the UK Admiralty service.\n * >>> Needs a Tide Station ID and a free API key.\n * See the Sea & Tide Info tab for more information.\n * ----------------------------------------------------------------------------\n */ \nglobal.set('tideStationId', '0074');  // Default is 0074 Littlehampton Harbour\nglobal.set('admiraltyApiKey', '0');\nglobal.set('tideLatitude', 50.8062);\nglobal.set('tideLongitude', -0.5434);\nglobal.set('tideLoc', 'Tides - Littlehampton Harbour');\n\n/* ----------------------------------------------------------------------------\n * REGIONAL SETTINGS\n * ----------------------------------------------------------------------------\n */\n// Language tag - used for time formatting\nglobal.set('locale', 'en-GB');\n// TZ Identifier - see https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\nglobal.set('timezone', 'Europe/London');\n\n/* ----------------------------------------------------------------------------\n * EMAIL SETTINGS\n * ----------------------------------------------------------------------------\n */\nglobal.set('emailTo', 'AdminsEmailAddress@test.com');\nglobal.set('emailFrom', 'MyMeshBopUnit@test.com');\nglobal.set('emailResponse', \"Email sent to [MeshBop Admin's Name]; receipt and response times are not guaranteed.\");\n\n/**\n * 🌦️ Met Norway API Contact Email\n * ---------------------------------\n * Met Norway requires a valid contact email address in case of API misuse.\n * By default, this uses the same email as `emailTo` (the alert recipient).\n * \n * If you want to use a different contact address, uncomment the manual line below\n *   and replace the example address with your own.\n * \n * Note: If this address is not set, the weather-fetching function will not run.\n */\n\n// Automatically use the same address as emailTo (recommended default)\nglobal.set('emailAddrForMetNorway', global.get('emailTo'));\n\n// Manual override example — uncomment and edit the line below to use a different address:\n// global.set('emailAddrForMetNorway', 'your.metcontact@example.com');\n\n// Dashboard display colors\nglobal.set('MBPColourLocal', '#1a1a1a');  // Local (sent) messages\nglobal.set('MBPColourRx', '#4a4a4a');     // Received messages\n\n/* ----------------------------------------------------------------------------\n * SYSTEM INFO: Please do not change\n * ----------------------------------------------------------------------------\n */\nglobal.set('version', 'MeshBop V0.50 beta.');\nglobal.set('info',\n  'MeshBop is a Meshtastic messaging system in Node-RED. ' +\n  'Uses data from various sources. Not an emergency service. ' +\n  'Third-party data may be unavailable; accuracy not guaranteed. E&OE.'\n);\nglobal.set('repository', 'https://github.com/linker3000/MeshBop');\n\nglobal.set('msgChunkSize', 197);  // Max message length before splitting\n\n/* ----------------------------------------------------------------------------\n * TIME FORMATTER\n * ----------------------------------------------------------------------------\n * Reusable global function returning formatted UTC and local time.\n */\nglobal.set('getFormattedTime', function() {\n    let now = new Date();\n\n    let utcHours = String(now.getUTCHours()).padStart(2, '0');\n    let utcMinutes = String(now.getUTCMinutes()).padStart(2, '0');\n    let utcTime = `${utcHours}:${utcMinutes}`;\n\n    let locale = global.get('locale') || 'en-GB';\n    let localTime = now.toLocaleTimeString(locale, {\n        hour12: false,\n        hour: '2-digit',\n        minute: '2-digit'\n    });\n\n    return `${utcTime} UTC (${localTime} Local)`;\n});\n\n/* ----------------------------------------------------------------------------\n * INIT MESSAGE\n * ----------------------------------------------------------------------------\n */\nlet basepattern = global.get('basePattern') ?? '[UNDEFINED]';\nnode.warn('Initialized with a base trigger pattern of: ' + basepattern);\n\nmsg.payload = true;\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":350,"y":160,"wires":[["6e43fa63bba7b499","037b38f93b7893c0"]]},{"id":"5d731e12aed285a8","type":"inject","z":"6072c34b94fdbe5d","name":"Initialise","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"initialise","payload":"true","payloadType":"bool","x":200,"y":100,"wires":[["02e2837ded2d55d4","38e80228b0e5038d"]]},{"id":"f973dd51fa549aa1","type":"change","z":"6072c34b94fdbe5d","name":"Send startup email","rules":[{"t":"set","p":"to","pt":"msg","to":"emailTo","tot":"global"},{"t":"set","p":"from","pt":"msg","to":"emailFrom","tot":"global"},{"t":"set","p":"payload","pt":"msg","to":"Hello. MeshBop has just been initialised / restarted.","tot":"str"},{"t":"set","p":"topic","pt":"msg","to":"version","tot":"global"}],"action":"","property":"","from":"","to":"","reg":false,"x":730,"y":220,"wires":[["800e594f28871147"]]},{"id":"38e80228b0e5038d","type":"link out","z":"6072c34b94fdbe5d","name":"Initialise signal","mode":"link","links":[],"x":345,"y":100,"wires":[]},{"id":"018ad06064e9940a","type":"http request","z":"6072c34b94fdbe5d","name":"Get TinyURL for repo","method":"GET","ret":"txt","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":420,"y":220,"wires":[["ad3d6f94d6d60398"]]},{"id":"ad3d6f94d6d60398","type":"function","z":"6072c34b94fdbe5d","name":"Store TinyURL","func":"// Store the shortened URL globally\nglobal.set('tinyUrl', msg.payload);\nnode.warn('TinyURL generated: ' + msg.payload);\nreturn null; // no message needed further\n","outputs":0,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":440,"y":280,"wires":[]},{"id":"6e43fa63bba7b499","type":"function","z":"6072c34b94fdbe5d","name":"Format URL","func":"// Get the repository URL from global context\nlet longUrl = global.get('repository') || '';\nif (!longUrl) {\n    node.error('Repository URL not set!');\n    return null;\n}\n\n// URL-encode it and push into msg.url for the HTTP Request node\nmsg.url = 'https://tinyurl.com/api-create.php?url=' + encodeURIComponent(longUrl);\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":210,"y":220,"wires":[["018ad06064e9940a"]]},{"id":"918057bdbef141e7","type":"comment","z":"6072c34b94fdbe5d","name":"CHANGE NOTES","info":"V0.50 beta \n\nThis is a major rewrite - see the release notes on the project page.\n\nhttps://github.com/linker3000/MeshBop","x":190,"y":40,"wires":[]},{"id":"05f32dfb91534929","type":"inject","z":"6072c34b94fdbe5d","name":"Trigger daily info message","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"00 07 * * *","once":false,"onceDelay":0.1,"topic":"","payload":"true","payloadType":"bool","x":280,"y":580,"wires":[["e0e57be4392943ad"]]},{"id":"e0e57be4392943ad","type":"link out","z":"6072c34b94fdbe5d","name":"Daily info message","mode":"link","links":["45a95d323b591ff7"],"x":495,"y":580,"wires":[]},{"id":"8e8d5d1c89e08e13","type":"inject","z":"6072c34b94fdbe5d","name":"Manual test short ident message","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":"2","topic":"","payload":"true","payloadType":"bool","x":290,"y":620,"wires":[["a66ab43995158f4b"]]},{"id":"a66ab43995158f4b","type":"link out","z":"6072c34b94fdbe5d","name":"Send short ident message","mode":"link","links":["3f4f79346330ac12"],"x":495,"y":620,"wires":[]},{"id":"01117bedbaeda88a","type":"inject","z":"6072c34b94fdbe5d","name":"Send report email","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"MeshBop. Test email","payload":"Hello. This is a test email from MeshBop","payloadType":"str","x":240,"y":460,"wires":[["f8c941946b99ed22"]]},{"id":"7f06ec2eaadca2f2","type":"link in","z":"6072c34b94fdbe5d","name":"Send an email","links":["5e0b829fad0d5eec","9b6e37fea3edfa4f","c154a8c79aa55895"],"x":325,"y":360,"wires":[["7337dd287592cc25"]]},{"id":"7337dd287592cc25","type":"change","z":"6072c34b94fdbe5d","name":"Configure an email","rules":[{"t":"set","p":"to","pt":"msg","to":"emailTo","tot":"global"},{"t":"set","p":"from","pt":"msg","to":"emailFrom","tot":"global"}],"action":"","property":"","from":"","to":"","reg":false,"x":470,"y":400,"wires":[["800e594f28871147"]]},{"id":"cabd79e0557d0ed9","type":"debug","z":"6072c34b94fdbe5d","name":"Debug email","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":930,"y":400,"wires":[]},{"id":"800e594f28871147","type":"function","z":"6072c34b94fdbe5d","name":"Check email addr.","func":"let emailTo = global.get('emailTo');\n\n// If emailTo is defined and not empty, pass msg\nif (emailTo && emailTo.trim() !== \"\") {\n    return msg;\n}\n\n// Otherwise, block\nnode.warn ('Unable to send email due to email format');\nreturn null;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":710,"y":400,"wires":[["cabd79e0557d0ed9","a777c0dd666b8d2d"]]},{"id":"4f5452226f9e3f28","type":"link in","z":"6072c34b94fdbe5d","name":"Send startup email","links":[],"x":715,"y":100,"wires":[["037b38f93b7893c0"]]},{"id":"1327c8086290e403","type":"inject","z":"6072c34b94fdbe5d","name":"Check severe weather warnings","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"3600","crontab":"","once":false,"onceDelay":"2","topic":"","payload":"true","payloadType":"bool","x":300,"y":660,"wires":[["e66afa4bc5f6d4f4"]]},{"id":"e66afa4bc5f6d4f4","type":"link out","z":"6072c34b94fdbe5d","name":"Check severe weather warnings","mode":"link","links":["d7facdef29f9338d"],"x":495,"y":660,"wires":[]},{"id":"acd501322c777909","type":"inject","z":"6072c34b94fdbe5d","name":"Reset all rate limits","props":[{"p":"reset","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"","x":350,"y":700,"wires":[["e1ff6d97de9c2ed0"]]},{"id":"e1ff6d97de9c2ed0","type":"link out","z":"6072c34b94fdbe5d","name":"Reset all rate limits trigger","mode":"link","links":["0e6b7f298ef00746"],"x":495,"y":700,"wires":[]},{"id":"a777c0dd666b8d2d","type":"e-mail","z":"6072c34b94fdbe5d","d":true,"server":"0.0.0.0","port":"465","authtype":"BASIC","saslformat":true,"token":"oauth2Response.access_token","secure":false,"tls":false,"name":"","dname":"Email","x":950,"y":460,"wires":[]},{"id":"344a4f8b6dc54168","type":"inject","z":"6072c34b94fdbe5d","name":"Time check (in debug window)","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"true","payloadType":"bool","x":320,"y":740,"wires":[["854ec6f2d2680c05"]]},{"id":"854ec6f2d2680c05","type":"function","z":"6072c34b94fdbe5d","name":"Fetch computed time","func":"// Retrieve the global function\nlet getFormattedTime = global.get('getFormattedTime');\n\n// Call it safely\nlet currentTime = (typeof getFormattedTime === 'function') ? getFormattedTime() : 'Time unavailable';\n\n// Log result\nnode.warn(\"Check time settings - I am using: \" + currentTime);\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":600,"y":740,"wires":[[]]},{"id":"f8c941946b99ed22","type":"function","z":"6072c34b94fdbe5d","name":"Report generator","func":"/**\n * Build a formatted report of all defined global variables\n * and either email it or send it to the dashboard\n */\n\nconst emailTo = global.get('emailTo') || \"\";\nconst emailFrom = global.get('emailFrom') || \"\";\n\nconst version = global.get('version') || \"MeshBop – Unversioned build\";\nconst locale = global.get('locale') || 'en-GB';\n\n// List of keys to redact\nconst redactedKeys = [\n    \"apiKey\",\n    \"apikey\",\n    \"key\",\n    \"password\",\n    \"pass\",\n    \"secret\",\n    \"token\"\n];\n\n// Header\nlet output = `Global Variable Snapshot Report\\n`;\noutput += `--------------------------------------\\n`;\noutput += `${version}\\nGenerated: ${new Date().toLocaleString(locale)}\\n\\n`;\n\n// Collect and sort all global keys\nconst keys = global.keys().sort();\noutput += `Total Variables Found: ${keys.length}\\n\\n`;\n\n// Determine max key length for alignment\nconst maxKeyLength = Math.max(...keys.map(k => k.length));\n\n// Helper to create dot leaders\nfunction dotLeader(key, padLength) {\n    const dots = '.'.repeat(padLength - key.length + 3); // +3 for spacing\n    return dots;\n}\n\n// Iterate over all keys\nfor (let key of keys) {\n    try {\n        const value = global.get(key);\n\n        // Detect sensitive keys\n        const isSensitive = redactedKeys.some(s =>\n            key.toLowerCase().includes(s.toLowerCase())\n        );\n\n        let formatted;\n        if (isSensitive) {\n            formatted = '[REDACTED]';\n        } else if (typeof value === \"object\") {\n            formatted = JSON.stringify(value, null, 2);\n        } else if (typeof value === \"function\") {\n            formatted = '[Function]';\n        } else {\n            formatted = String(value);\n        }\n\n        output += `${key}${dotLeader(key, maxKeyLength)}${formatted}\\n`;\n    } catch (err) {\n        output += `${key}${dotLeader(key, maxKeyLength)}[Error reading value]\\n`;\n    }\n}\n\n// Get the current local time in 24-hour format, truncating to HH:MM (no seconds)\nlet currentTime = new Date().toLocaleTimeString(global.get('locale') || 'en-GB', {\n    hour12: false,\n    hour: '2-digit',\n    minute: '2-digit'\n});\n\n// Get the current UTC time in 24-hour format, truncating to HH:MM (no seconds)\nlet utcTime = new Date().toUTCString().split(' ')[4].substring(0, 5);  // Truncate to HH:MM\n\n// Footer\noutput += '\\nLocal time: ' + currentTime + ' (' + \nutcTime + ' UTC)\\n\\nEnd of report.\\n';\n\n// Prepare message with email fields\nmsg.to = emailTo;\nmsg.from = emailFrom;\nmsg.topic = \"MeshBop Global Variables Report\";\nmsg.payload = output;\n// Route based on msg.dashboard\nif (msg.dashboard === true) {\n    return [null, msg];  // Send to output 2 (dashboard)\n} else {\n    return [msg, null];  // Send to output 1 (email)\n}","outputs":2,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":510,"y":460,"wires":[["800e594f28871147"],["5e4a617fba5f3e2b"]]},{"id":"bcff4ff184b908a9","type":"inject","z":"6072c34b94fdbe5d","name":"Send report to dashboard","props":[{"p":"dashboard","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":270,"y":500,"wires":[["f8c941946b99ed22"]]},{"id":"5e4a617fba5f3e2b","type":"link out","z":"6072c34b94fdbe5d","name":"Send report to dashboard","mode":"link","links":["7b89c6f062a10a67"],"x":665,"y":460,"wires":[]},{"id":"2fb571f478071b2f","type":"comment","z":"6072c34b94fdbe5d","name":"Reports...","info":"Emails a report of all variable settings, or\nsends it to the dashboard.","x":200,"y":420,"wires":[]},{"id":"037b38f93b7893c0","type":"function","z":"6072c34b94fdbe5d","name":"Format Subject","func":"msg.topic = \"Startup: \" + (global.get('version') || 'UNDEFINED') + ' Ident: ' + (global.get('basePattern') || 'UNDEFINED');\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":740,"y":160,"wires":[["f973dd51fa549aa1"]]},{"id":"de4771a9f0f9656f","type":"link out","z":"5de1779936bc2efd","name":"Astro trigger","mode":"link","links":["21367e32e1bebe1c"],"x":985,"y":440,"wires":[]},{"id":"80e4760fcda6f6e1","type":"link out","z":"5de1779936bc2efd","name":"Zen trigger","mode":"link","links":["0821a0f25689d689"],"x":985,"y":480,"wires":[]},{"id":"88ad0be0f2f9967b","type":"link out","z":"5de1779936bc2efd","name":"Test / Ping trigger","mode":"link","links":["7786b9c6b29eb867"],"x":985,"y":320,"wires":[]},{"id":"7466b7238e1b3341","type":"function","z":"5de1779936bc2efd","name":"Parse Rx / Set help texts","func":"/* --------------------------------------------------------------------------\n  Parse input messages and determine whether to act on them.\n\n  Version: 1.1 — 20251006\n\n  ────────────────────────────────────────────────────────────────────────────\n  Overview:\n  Add new regex definitions at the end of the current list. \n  Each entry must include a help message and the corresponding node output index. \n  Use the **Setup** tab above to adjust the number of function outputs as required.\n  \n  Help text is assembled in alphabetical order, with triggered items\n  (e.g., /l3k[something]) listed first, followed by inbound messages\n  without tag patterns (e.g., \"test\").\n  \n  To avoid false positives, messages without a tag pattern are only matched\n  if they are the **first and only element** in a message. \n  For example:\n    \"test\" → will trigger a response\n    \"This is a test\" → will NOT trigger\n\n  ────────────────────────────────────────────────────────────────────────────\n  Regex pattern structure:\n  Each entry follows the general form:\n      pattern, \"help message text\", output index\n\n  Example:\n      { regex: /^\\/?ping$/, helpText: \"ping = Ping test\", outputIndex: 3 }\n\n  ────────────────────────────────────────────────────────────────────────────\n  Adding new regex triggers:\n  • Copy one of the existing definitions.\n  • Modify the pattern, help text, and output index as needed.\n  • Place the new entry where indicated below in the list.\n\n  Important:\n  Thoroughly test any new trigger.\n  Do not create patterns that could respond to nearly any message content.\n\n  -------------------------------------------------------------------------- */\n\nif (!msg || msg.payload == null) return null;\n\n// ──────────────────────────────\n// Setup and context\n// ──────────────────────────────\nconst basePattern = (global.get(\"basePattern\") || \"/l3k\").toLowerCase();\nconst helpTrigger = global.get(\"helpTrigger\");\nconst ident = basePattern.replace(/^\\/(.*)$/, '$1');\nconst version = global.get('version') || '';\n\nconst content = String(msg.payload || \"\")\n    .replace(/^[^:]+:\\s*/, '')     // Remove sender prefix if present\n    .trim()\n    .replace(/[^\\x20-\\x7E]/g, '')  // Strip non-printable chars\n    .toLowerCase();\n\n// Debug output (optional)\nnode.warn(`basePattern=\"${basePattern}\", content=\"${content}\"`);\n\n// ──────────────────────────────\n// Command patterns\n// ──────────────────────────────\nconst patterns = [\n    { regex: /^\\/?(test|testing)$/, helpText: `test = Test message (also /test).`, outputIndex: 2 },\n    { regex: /^\\/?ping$/, helpText: `ping = Ping test (also /ping).`, outputIndex: 3 },\n    { regex: new RegExp(`^${basePattern}w$`), helpText: `${basePattern}w = Weather.`, outputIndex: 4 },\n    { regex: new RegExp(`^${basePattern}n(?:,\\\\d+)?(?:,u)?$`), helpText: `${basePattern}n = BBC news. Add ,num for # articles (max 10). Add ,u for URLs (e.g., /l3kn,5,u).`, outputIndex: 5 },\n    { regex: new RegExp(`^${basePattern}t$`), helpText: `${basePattern}t = Time & astro info.`, outputIndex: 6 },\n    { regex: new RegExp(`^${basePattern}z$`), helpText: `${basePattern}z = Zen quote.`, outputIndex: 7 },\n    { regex: new RegExp(`^${basePattern}i$`), helpText: `${basePattern}i = App info and disclaimers.`, outputIndex: 8 },\n    { regex: new RegExp(`@${ident}`), helpText: `@${ident} = Send email to admin.`, outputIndex: 9 },\n    { regex: new RegExp(`^${basePattern}s$`), helpText: `${basePattern}s = Sea state report.`, outputIndex: 10 }\n\n    // Add new regexes below here.\n];\n\n// ──────────────────────────────\n// Help pattern setup\n// ──────────────────────────────\nlet helpPattern = null;\nif (helpTrigger) {\n    const escaped = helpTrigger.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');\n    helpPattern = {\n        regex: new RegExp(`^${basePattern}${escaped}$`),\n        helpText: `${basePattern}${helpTrigger} = Help menu.`,\n        outputIndex: 1\n    };\n    patterns.push(helpPattern);\n}\n\n// ──────────────────────────────\n// Help builder\n// ──────────────────────────────\nfunction assembleHelpBlocks(maxLen = 197) {\n    if (!helpTrigger) return null;\n    const helpMessages = patterns\n        .filter(p => p !== helpPattern)\n        .map(p => p.helpText);\n\n    // Order: command patterns first, generic triggers after\n    const ordered = [\n        ...helpMessages.filter(m => m.startsWith('/')).sort(),\n        ...helpMessages.filter(m => !m.startsWith('/')).sort()\n    ];\n\n    const blocks = [];\n    let current = version ? `${version} ` : 'Help menu: ';\n\n    for (const msg of ordered) {\n        const cleaned = msg.replace(/\\n/g, ' ').trim();\n        if ((current + cleaned + ' | ').length > maxLen) {\n            blocks.push({ payload: current.replace(/\\s*\\|\\s*$/, ''), type: 'noident' });\n            current = '';\n        }\n        current += cleaned + ' | ';\n    }\n\n    if (current.trim()) {\n        blocks.push({ payload: current.replace(/\\s*\\|\\s*$/, ''), type: 'noident' });\n    }\n\n    return blocks;\n}\n\n// ──────────────────────────────\n// Output handling\n// ──────────────────────────────\nconst outputCount = 11;  // 0–10 inclusive\nconst emptyOutputs = () => Array(outputCount).fill(null);\n\n// Manual help request\nif (msg.topic === \"generate_help\") {\n    const out = emptyOutputs();\n    out[0] = { payload: \"Help requested\" };\n    out[1] = assembleHelpBlocks();\n    return out;\n}\n\n// ──────────────────────────────\n// Pattern matching and routing\n// ──────────────────────────────\nfor (const pattern of patterns) {\n    if (pattern.regex.test(content)) {\n        const out = emptyOutputs();\n        out[0] = { payload: `Matched: \"${content}\" → ${pattern.helpText}` };\n        node.warn(`Routing to outputIndex=${pattern.outputIndex}`);\n\n        if (pattern === helpPattern) {\n            out[1] = assembleHelpBlocks();\n        } else {\n            out[pattern.outputIndex] = msg;\n        }\n\n        return out;\n    }\n}\n\n// ──────────────────────────────\n// No match found\n// ──────────────────────────────\nconst out = emptyOutputs();\nout[0] = { payload: `No match found for: \"${content}\"` };\nreturn out;\n","outputs":11,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":690,"y":320,"wires":[["4f71ed71d907784e"],["0cafe262eb5e5e80"],["88ad0be0f2f9967b"],["88ad0be0f2f9967b"],["0022bcd6eadb47f3"],["bbe0491ff2d837fb"],["de4771a9f0f9656f"],["80e4760fcda6f6e1"],["10cb3c3ec2bdf498"],["364c13c7885ac45b"],["f6a6f1452da3ef38"]]},{"id":"d03b6605927cb19e","type":"inject","z":"5de1779936bc2efd","name":"Test news (no params) [5]","props":[{"p":"payload"},{"p":"test","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"n","payloadType":"str","x":230,"y":480,"wires":[["02c9b9965e857acd"]]},{"id":"4f71ed71d907784e","type":"debug","z":"5de1779936bc2efd","name":"Triggers debug","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":1000,"y":220,"wires":[]},{"id":"d028bed5e0c88370","type":"inject","z":"5de1779936bc2efd","name":"Test news,u [5]","props":[{"p":"payload"},{"p":"test","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"n,u","payloadType":"str","x":200,"y":440,"wires":[["02c9b9965e857acd"]]},{"id":"80547b9a73f88f90","type":"inject","z":"5de1779936bc2efd","name":"Test weather [4]","props":[{"p":"payload"},{"p":"test","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"W","payloadType":"str","x":200,"y":400,"wires":[["02c9b9965e857acd"]]},{"id":"e2aad0f62b32d938","type":"inject","z":"5de1779936bc2efd","name":"Test Zen quote [7]","props":[{"p":"payload"},{"p":"test","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"z","payloadType":"str","x":210,"y":560,"wires":[["02c9b9965e857acd"]]},{"id":"82923c664b957fbf","type":"inject","z":"5de1779936bc2efd","name":"Test help msg [1]","props":[{"p":"payload"},{"p":"test","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"?","payloadType":"str","x":200,"y":240,"wires":[["02c9b9965e857acd"]]},{"id":"453a2c29892f03ca","type":"inject","z":"5de1779936bc2efd","name":"Test time/astro 6]","props":[{"p":"payload"},{"p":"test","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"t","payloadType":"str","x":200,"y":520,"wires":[["02c9b9965e857acd"]]},{"id":"10cb3c3ec2bdf498","type":"link out","z":"5de1779936bc2efd","name":"Info message trigger","mode":"link","links":["45a95d323b591ff7"],"x":985,"y":520,"wires":[]},{"id":"58411028a82c4946","type":"inject","z":"5de1779936bc2efd","name":"Test Email trigger [9]","props":[{"p":"payload"},{"p":"topic","vt":"str"},{"p":"test","v":"true","vt":"bool"},{"p":"noBase","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"Meshbop test email","payload":"Would @mzzz contact me @mzzz PLEASE","payloadType":"str","x":210,"y":640,"wires":[["02c9b9965e857acd"]]},{"id":"9b6e37fea3edfa4f","type":"link out","z":"5de1779936bc2efd","name":"@email trigger - send email","mode":"link","links":["7f06ec2eaadca2f2"],"x":1085,"y":740,"wires":[]},{"id":"8bd3b90c4ea81917","type":"inject","z":"5de1779936bc2efd","name":"Ping message [3]","props":[{"p":"payload"},{"p":"test","v":"true","vt":"bool"},{"p":"noBase","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"PiNg","payloadType":"str","x":200,"y":360,"wires":[["02c9b9965e857acd"]]},{"id":"0cafe262eb5e5e80","type":"link out","z":"5de1779936bc2efd","name":"Help msg out","mode":"link","links":["83918985b6d1aa7a"],"x":985,"y":280,"wires":[]},{"id":"0022bcd6eadb47f3","type":"link out","z":"5de1779936bc2efd","name":"Weather trigger","mode":"link","links":["df4b80164bc41043","7f2d9e81d7a5504c"],"x":985,"y":360,"wires":[]},{"id":"bbe0491ff2d837fb","type":"link out","z":"5de1779936bc2efd","name":"News trigger","mode":"link","links":["ed580b9945bb2177"],"x":985,"y":400,"wires":[]},{"id":"915a2cabbb7637a5","type":"inject","z":"5de1779936bc2efd","name":"\"Test\" mixed case","props":[{"p":"payload"},{"p":"test","v":"true","vt":"bool"},{"p":"noBase","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"TeSt","payloadType":"str","x":200,"y":280,"wires":[["02c9b9965e857acd"]]},{"id":"b679f586092e5433","type":"inject","z":"5de1779936bc2efd","name":"Test info msg [8]","props":[{"p":"payload"},{"p":"test","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"i","payloadType":"str","x":200,"y":600,"wires":[["02c9b9965e857acd"]]},{"id":"f6a6f1452da3ef38","type":"link out","z":"5de1779936bc2efd","name":"Sea state trigger","mode":"link","links":["c73fccf27bc4fada"],"x":985,"y":560,"wires":[]},{"id":"5cb540976db92526","type":"inject","z":"5de1779936bc2efd","name":"Sea state trigger [10]","props":[{"p":"payload"},{"p":"test","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"s","payloadType":"str","x":210,"y":680,"wires":[["02c9b9965e857acd"]]},{"id":"615fb1346822898b","type":"link in","z":"5de1779936bc2efd","name":"Parse received message","links":["89d9e3a99fac1aeb"],"x":495,"y":220,"wires":[["7466b7238e1b3341"]]},{"id":"364c13c7885ac45b","type":"function","z":"5de1779936bc2efd","name":"Email response","func":"// TxMessage: version + no guarantees message\nlet TxMessage = {\n    payload: (global.get('version') || '') + ' ' + (global.get('emailResponse') || ''),\n    messageType: 'TxMessage'\n};\n\n// emailMessage: pass inbound msg.payload and msg.topic unchanged\nlet emailMessage = msg;\n\n// Return as two outputs: [TxMessage, emailMessage]\nreturn [TxMessage, emailMessage];\n","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":820,"y":720,"wires":[["942f0f84a72570ec","4766e63728372f24"],["9b6e37fea3edfa4f","9c260f1ef754b7c1"]]},{"id":"4766e63728372f24","type":"link out","z":"5de1779936bc2efd","name":"@email trigger - Tx response","mode":"link","links":["83918985b6d1aa7a"],"x":1085,"y":700,"wires":[]},{"id":"011daf0bcdac9c46","type":"inject","z":"5de1779936bc2efd","name":"Ignore \"test\" trigger","props":[{"p":"payload"},{"p":"test","v":"true","vt":"bool"},{"p":"noBase","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"This is a test message","payloadType":"str","x":210,"y":320,"wires":[["02c9b9965e857acd"]]},{"id":"9c260f1ef754b7c1","type":"debug","z":"5de1779936bc2efd","name":"Debug email","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":930,"y":780,"wires":[]},{"id":"942f0f84a72570ec","type":"debug","z":"5de1779936bc2efd","name":"Debug Tx response","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":950,"y":660,"wires":[]},{"id":"9cdaa1777ae9a723","type":"inject","z":"5de1779936bc2efd","name":"Reset all rate limits","props":[{"p":"reset","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":190,"y":100,"wires":[["5ea19a8a408af927"]]},{"id":"5ea19a8a408af927","type":"link out","z":"5de1779936bc2efd","name":"Reset all rate limits trigger","mode":"link","links":["0e6b7f298ef00746"],"x":345,"y":100,"wires":[]},{"id":"8a8327e87ef6df2d","type":"inject","z":"5de1779936bc2efd","name":"Send real test email","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"Meshbop test email","payload":"Tes email from the parsing flow","payloadType":"str","x":210,"y":720,"wires":[["364c13c7885ac45b"]]},{"id":"f1d33a23bcf91006","type":"comment","z":"5de1779936bc2efd","name":"Parse flow notes - READ BEFORE TESTING","info":"This node checks received messages for triggers that cause\nMeshBop to send responses.\n\nMost processing happens in the main function block, which contains\nthe regular expression checks, help messages, and trigger routing.\n\nIf you plan to modify this node’s functionality, first copy and paste\na backup of the current version. Then disable it to avoid potential\ndouble-triggering. If something goes wrong, you can restore the backed-up\nfunction code by copying its contents back into the live function.\n\nThere are several test triggers to assist with debugging — edit or expand\nthem as needed.\n\nNote that most test triggers on this tab set msg.test to true, which means\nany output is dropped and not sent to the Async Out node. However, it will still\nappear in the debug window.\n\nIf a trigger is not delineated by the base pattern defined in the setup\nfunction on the first tab, set the variable noBase = true in its test inject node.\nThis allows it to be test-parsed without the base pattern being added — for example,\ntriggers such as echo (no quotes; must be the only string in the inbound message).\nTake care not to create triggers that will activate excessively, especially\nsingle-word ones such as yes.\n\nThe “Send real test email” trigger cannot detect whether the Email node is disabled\nor if the email failed to send.","x":250,"y":40,"wires":[]},{"id":"02c9b9965e857acd","type":"function","z":"5de1779936bc2efd","name":"set up test","func":"// Check if 'noBase' is set (can come from msg or global)\nlet noBase = msg.noBase || global.get('noBase');\n\n// Default base pattern\nlet base = global.get('basePattern') || \"/T$BOP\";\n\n// If noBase is true, remove the base prefix\nif (noBase === true) {\n    base = '';\n}\n\n// Build final payload\nmsg.payload = 'TEST:' + `${base}${String(msg.payload)}`.trim();\n\nreturn msg;\n","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":470,"y":480,"wires":[["7466b7238e1b3341"]]},{"id":"5ca697ce8bfe9ee5","type":"serial in","z":"69a8cbab824f40ec","name":"Async in","serial":"6bb7116284e361c7","x":280,"y":380,"wires":[["a9fdda1bd9fd23c2","8a28136cca320ff6"]]},{"id":"a9fdda1bd9fd23c2","type":"function","z":"69a8cbab824f40ec","name":"Sanitise string","func":"// Removes problematic characters in string\n// V1.3 20251007\n\nlet str = msg.payload;\n\n// Remove any leading or trailing spaces in the received message\nstr = str.trim();\n\n// Remove ASCII control characters except BEL (\\x07)\nstr = str.replace(/[\\x00-\\x06\\x08-\\x1F\\x7F]/g, '');  // Remove unwanted control chars\n\n// Skip empty messages after cleaning\nif (str === '') return null;\n\nmsg.payload = str;\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":520,"y":380,"wires":[["fdb4e0964e3020d6","89d9e3a99fac1aeb"]]},{"id":"6d4ea8225a7d0d76","type":"serial out","z":"69a8cbab824f40ec","name":"Async out","serial":"6bb7116284e361c7","x":1020,"y":100,"wires":[]},{"id":"83918985b6d1aa7a","type":"link in","z":"69a8cbab824f40ec","name":"Node Tx","links":["74daf3be6e509561","4e760576267c9d6e","847d4ed6a2c367c6","c4ee61131e22d36c","4133147d69bfe913","5e0b829fad0d5eec","aca9874a15a429c3","0cafe262eb5e5e80","c2abec17afb88552","c76f728b8754acfb","4766e63728372f24"],"x":245,"y":180,"wires":[["468a1836a59fc54b"]]},{"id":"54c0a56cb2de6720","type":"delay","z":"69a8cbab824f40ec","name":"Rate limit","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"2","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":780,"y":180,"wires":[["19c0290ee70be553"]]},{"id":"fdb4e0964e3020d6","type":"debug","z":"69a8cbab824f40ec","name":"Async in sanitised","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":770,"y":420,"wires":[]},{"id":"89d9e3a99fac1aeb","type":"link out","z":"69a8cbab824f40ec","name":"Received message","mode":"link","links":["615fb1346822898b","c951aa4b87095d5d"],"x":695,"y":380,"wires":[]},{"id":"f2222d7a648fb57d","type":"function","z":"69a8cbab824f40ec","name":"Short ident message","func":"// V1.1 20251014\n\nif (global.get('version') && global.get('helpTrigger') && global.get('basePattern')) {\n    msg.payload = global.get('version') + ' Send ' + global.get('basePattern') \n      + global.get('helpTrigger') + ' for menu.';\n    return msg;\n} else {\n    return null; // Don't send anything if any value is missing or empty\n}\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":780,"y":240,"wires":[["54c0a56cb2de6720"]]},{"id":"c184878b05689842","type":"link in","z":"69a8cbab824f40ec","name":"Send ident message","links":[],"x":245,"y":280,"wires":[["819fe19c9d58a829"]]},{"id":"4ab211d94ee79c83","type":"delay","z":"69a8cbab824f40ec","name":"","pauseType":"delay","timeout":"2","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":540,"y":240,"wires":[["f2222d7a648fb57d"]]},{"id":"e35468c6723cae50","type":"link out","z":"69a8cbab824f40ec","name":"Reset rate limits","mode":"link","links":["812c781e03c56ca6","9edd029dc17e165c","2940f2a5e8038793","24dd07ddafab3484"],"x":465,"y":100,"wires":[]},{"id":"468a1836a59fc54b","type":"function","z":"69a8cbab824f40ec","name":"Process message/s for output","func":"// Remove ASCII control characters (excelt BEL)\n//\n// V1.1 20251007\n\nlet message = msg.payload;\n\n// Split and filter out empty sections\nlet sections = message.split('\\n').filter(s => s.trim() !== '');\n\n// Regular expression to remove ASCII control characters except BEL (\\x07)\nlet controlCharRegex = /[\\x00-\\x06\\x08-\\x1F\\x7F]/g;\n\nsections.forEach(section => {\n    // Clean the section: remove unwanted control characters\n    let cleanedSection = section.replace(controlCharRegex, '');\n\n    if (cleanedSection === '') return; // skip empty sections\n\n    // Send the cleaned section as a message\n    let newMsg = { ...msg };\n    newMsg.payload = cleanedSection + '\\n'; // keep \\n at end\n    node.send([newMsg, null]);\n});\n\n// Send completion message if applicable\nif (msg.type !== 'noident') {\n    let completionMsg = { ...msg };\n    completionMsg.payload = true;\n    node.send([null, completionMsg]);\n}\n\n// Prevent the original message from being sent\nreturn null;\n","outputs":2,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":450,"y":180,"wires":[["54c0a56cb2de6720"],["6c990a28463c3dfe"]]},{"id":"819fe19c9d58a829","type":"delay","z":"69a8cbab824f40ec","name":"Ident limit","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"minute","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":true,"allowrate":false,"outputs":1,"x":380,"y":240,"wires":[["4ab211d94ee79c83"]]},{"id":"e2ada98af135bb11","type":"link out","z":"69a8cbab824f40ec","name":"Outgoing message stream","mode":"link","links":[],"x":975,"y":140,"wires":[]},{"id":"8a28136cca320ff6","type":"debug","z":"69a8cbab824f40ec","name":"Async in received","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":490,"y":440,"wires":[]},{"id":"19c0290ee70be553","type":"function","z":"69a8cbab824f40ec","name":"Gatekeeper","func":"// Detect test messages\nconst isTest =\n    msg.test === true ||\n    msg.topic === \"test\" ||\n    msg.payload?.type === \"test\" ||\n    msg.payload?.test === true;\n\n// Log messages\nconst logPrefix = isTest ? \"[TEST DROPPED]\" : \"[OUTBOUND]\";\nconst logBody = `${msg.topic ? msg.topic + \" \" : \"\"}${JSON.stringify(msg.payload)}`;\nnode.warn(`${logPrefix} ${logBody}`);\n\n// If test, send reset signal with empty payload.\n// This is used to reset the rate limiters during\n// testing.\nif (isTest) {\n    let resetMsg = { reset: true }; // payload intentionally left empty\n    return [resetMsg, null];\n}\n\n// Otherwise, pass normal messages through second output\nreturn [null, msg];\n","outputs":2,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":770,"y":100,"wires":[["54c0a56cb2de6720"],["e2ada98af135bb11","6d4ea8225a7d0d76"]]},{"id":"3f4f79346330ac12","type":"link in","z":"69a8cbab824f40ec","name":"Trigger short ident message","links":["a66ab43995158f4b"],"x":585,"y":280,"wires":[["f2222d7a648fb57d"]]},{"id":"0e6b7f298ef00746","type":"link in","z":"69a8cbab824f40ec","name":"Reset all rate limits in","links":["5ea19a8a408af927","e1ff6d97de9c2ed0"],"x":245,"y":100,"wires":[["e35468c6723cae50","819fe19c9d58a829","54c0a56cb2de6720"]]},{"id":"d5fbb22997e97b04","type":"comment","z":"69a8cbab824f40ec","name":"Rx / Tx notes","info":"The Rx and Tx nodes must be configured to match the\nasync (serial) port used on this device to communicate\nwith the mesh node.\n\nThe Tx (transmit) node may be disabled in downloaded code updates\nto reduce the risk of misconfiguration spamming the mesh.\nEnable this node only after thoroughly testing your setup.\n\nIf running on a Linux system and your async In and Out nodes don’t work\nor don’t show as “connected,” you may need to add the account running Node-RED\nto the dialout group (or the equivalent for your distribution).\nThis is well-documented — try a web search for “linux dialout serial”.\n\nThere is a junction node linking the second output of the output-processing node\nto the ident-sending node. This should be disabled by default; otherwise, all\nsent messages will be followed by a MeshBop ident. This link is for testing only,\nand such messages are rate-limited to avoid spamming.","x":290,"y":40,"wires":[]},{"id":"45a95d323b591ff7","type":"link in","z":"69a8cbab824f40ec","name":"Info msg trigger","links":["10cb3c3ec2bdf498","e0e57be4392943ad"],"x":235,"y":540,"wires":[["132ef826220f06df"]]},{"id":"132ef826220f06df","type":"function","z":"69a8cbab824f40ec","name":"Format info msg","func":"node.warn('Info string = ' + global.get('info'));\n\nmsg.payload = global.get('info') || 'MeshBop messaging service is online.'; // Default\nmsg.infoText = msg.payload; // Preserve for later combination\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":400,"y":540,"wires":[["5913257cd390769c"]]},{"id":"4d0682f2a5dc8c12","type":"delay","z":"69a8cbab824f40ec","name":"","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"4","nbRateUnits":"1","rateUnits":"minute","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":true,"allowrate":false,"outputs":1,"x":830,"y":540,"wires":[["aca9874a15a429c3","cafa6924cb88fe25"]]},{"id":"24dd07ddafab3484","type":"link in","z":"69a8cbab824f40ec","name":"Reset rate limits","links":["e35468c6723cae50"],"x":645,"y":600,"wires":[["4d0682f2a5dc8c12"]]},{"id":"aca9874a15a429c3","type":"link out","z":"69a8cbab824f40ec","name":"Info msg out","mode":"link","links":["83918985b6d1aa7a"],"x":965,"y":540,"wires":[]},{"id":"eeb3a9f68f921343","type":"inject","z":"69a8cbab824f40ec","name":"Test","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"true","payloadType":"bool","x":290,"y":600,"wires":[["132ef826220f06df"]]},{"id":"cafa6924cb88fe25","type":"debug","z":"69a8cbab824f40ec","name":"Info message","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":880,"y":600,"wires":[]},{"id":"5913257cd390769c","type":"function","z":"69a8cbab824f40ec","name":"Assemble message","func":"let hT = global.get('basePattern') +\n              global.get('helpTrigger');\n\nmsg.payload = (msg.infoText || global.get('info') || 'MeshBop messaging service is online.')\n             .replace(/\\n+$/,'')  // remove trailing newlines\n             + '\\nMeshBop menu - send ' + hT;\n\nmsg.type = 'noident';\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":610,"y":540,"wires":[["4d0682f2a5dc8c12"]]},{"id":"7ee556e1d8abe6fd","type":"inject","z":"69a8cbab824f40ec","name":"Test ident","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"true","payloadType":"bool","x":540,"y":320,"wires":[["f2222d7a648fb57d"]]},{"id":"7786b9c6b29eb867","type":"link in","z":"9ac3f7bae9e19be1","name":"Test / Ping trigger","links":["88ad0be0f2f9967b"],"x":215,"y":160,"wires":[["9e0e6abcc44ae266"]]},{"id":"9e0e6abcc44ae266","type":"function","z":"9ac3f7bae9e19be1","name":"Ping / Test reply","func":"// Ensure version is set\nglobal.get(\"version\") || \"Version not set\";\n\n// Check and normalize inbound payload\nif (typeof msg.payload !== \"string\" || !msg.payload.includes(\":\")) {\n    msg.payload = \"UNDEF:ping\";\n}\n\n// Split incoming payload\nlet parts = msg.payload.split(\":\");\nlet location = global.get('location') || 'London';\n\n// Use the global time function\nlet getFormattedTime = global.get('getFormattedTime');\nlet currentTime = (typeof getFormattedTime === 'function') ? getFormattedTime() : 'Time unavailable';\n\n// Assemble the message with version appended\nmsg.payload = `Hello ${parts[0].trim()}. ${parts[1].trim().charAt(0).toUpperCase() \n  + parts[1].trim().slice(1).toLowerCase()\n} received in ${location} at ${currentTime} by ${global.get('version')}`;\n\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":400,"y":160,"wires":[["3fc880ef741905ba"]]},{"id":"c4ee61131e22d36c","type":"link out","z":"9ac3f7bae9e19be1","name":"Ping / test out","mode":"link","links":["83918985b6d1aa7a"],"x":905,"y":160,"wires":[]},{"id":"3fc880ef741905ba","type":"delay","z":"9ac3f7bae9e19be1","name":"","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"6","nbRateUnits":"1","rateUnits":"minute","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":true,"allowrate":false,"outputs":1,"x":690,"y":160,"wires":[["c4ee61131e22d36c","6bead497f52e924c"]]},{"id":"c68c69070fd15eb0","type":"comment","z":"9ac3f7bae9e19be1","name":"Notes","info":"The default regex in the parse function node allows the ping test \ntext to be returned for the following:\n\nping, /ping, test or /test\n\n...only if there is nothing else in the message.\n","x":250,"y":80,"wires":[]},{"id":"6bead497f52e924c","type":"debug","z":"9ac3f7bae9e19be1","name":"Ping debug","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":830,"y":220,"wires":[]},{"id":"812c781e03c56ca6","type":"link in","z":"9ac3f7bae9e19be1","name":"Reset rate limits","links":["e35468c6723cae50"],"x":515,"y":100,"wires":[["3fc880ef741905ba"]]},{"id":"c76f728b8754acfb","type":"link out","z":"9ac3f7bae9e19be1","name":"Weather / Astro out","mode":"link","links":["83918985b6d1aa7a"],"x":905,"y":380,"wires":[]},{"id":"9373709dae7fe351","type":"astrodata dayvalues","z":"9ac3f7bae9e19be1","name":"","lon":"","lat":"","height":"","lang":"en","offset":0,"x":560,"y":380,"wires":[["890a8b6dbe8f94ac"]]},{"id":"21367e32e1bebe1c","type":"link in","z":"9ac3f7bae9e19be1","name":"Astro trigger","links":["de4771a9f0f9656f"],"x":215,"y":380,"wires":[["62e8e7cea9bc3df7"]]},{"id":"911eadc79e8d3e4e","type":"debug","z":"9ac3f7bae9e19be1","name":"Astro","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":850,"y":440,"wires":[]},{"id":"ad4a2027b1d0888e","type":"inject","z":"9ac3f7bae9e19be1","name":"Astro test","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"true","payloadType":"bool","x":280,"y":320,"wires":[["62e8e7cea9bc3df7"]]},{"id":"890a8b6dbe8f94ac","type":"function","z":"9ac3f7bae9e19be1","name":"Astro message","func":"// Ensure the data is available in msg (sunRise and sunSet)\nlet sunrise = msg.sunRise;\nlet sunset = msg.sunSet;\n\n// Truncate sunrise and sunset to just HH:MM (remove the seconds)\nsunrise = sunrise.substring(0, 5);  // Extracts the first 5 characters (HH:MM)\nsunset = sunset.substring(0, 5);    // Same for sunset\n\n// Get the current local time in 24-hour format, truncating to HH:MM (no seconds)\nlet currentTime = new Date().toLocaleTimeString(global.get('locale') || 'en-GB', {\n    hour12: false,\n    hour: '2-digit',\n    minute: '2-digit'\n});\n\n// Get the current UTC time in 24-hour format, truncating to HH:MM (no seconds)\nlet utcTime = new Date().toUTCString().split(' ')[4].substring(0, 5);  // Truncate to HH:MM\n\n// Construct the message\nmsg.payload = (global.get('location') || 'London') +\n    ': Local time ' + currentTime +\n    ' (' + utcTime + ' UTC)' +\n    '. Sunrise: ' + sunrise +\n    ', Sunset: ' + sunset + ' (local times).';\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":760,"y":380,"wires":[["911eadc79e8d3e4e","c76f728b8754acfb"]]},{"id":"62e8e7cea9bc3df7","type":"function","z":"9ac3f7bae9e19be1","name":"Get params","func":"// Retrieve global variables to be used in the call to astrodata\nmsg.lat = global.get('latitude') || 51.5074;\nmsg.lon = global.get('longitude') || -0.1278;\nmsg.height = global.get('height') || 10;\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":390,"y":380,"wires":[["9373709dae7fe351"]]},{"id":"26c63b20b7dccd44","type":"inject","z":"9ac3f7bae9e19be1","name":"Test ping","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"AAAA: PiNg","payloadType":"str","x":260,"y":220,"wires":[["9e0e6abcc44ae266"]]},{"id":"ed580b9945bb2177","type":"link in","z":"2cd572b50cf87813","name":"News trigger","links":["bbe0491ff2d837fb"],"x":125,"y":140,"wires":[["97863d3440213bf0"]]},{"id":"4e760576267c9d6e","type":"link out","z":"2cd572b50cf87813","name":"News out","mode":"link","links":["83918985b6d1aa7a"],"x":845,"y":360,"wires":[]},{"id":"22f636706a835d4f","type":"feedparser-simple","z":"2cd572b50cf87813","name":"Get RSS feed","x":720,"y":140,"wires":[["cab9b682c90b81b0"]]},{"id":"f2d443f503c063b1","type":"trigger","z":"2cd572b50cf87813","name":"Set RSS feed url","op1":"","op2":"http://feeds.bbci.co.uk/news/rss.xml","op1type":"nul","op2type":"str","duration":"250","extend":false,"overrideDelay":false,"units":"ms","reset":"","bytopic":"all","topic":"topic","outputs":1,"x":390,"y":140,"wires":[["0a9c256463a58b0a","22f636706a835d4f"]]},{"id":"3afdfc91001a4d0b","type":"debug","z":"2cd572b50cf87813","name":"News output","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":770,"y":420,"wires":[]},{"id":"bd31db918d29099b","type":"inject","z":"2cd572b50cf87813","name":"Test 5,u","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"/l3kn,5,u","payloadType":"str","x":150,"y":300,"wires":[["97863d3440213bf0"]]},{"id":"cab9b682c90b81b0","type":"function","z":"2cd572b50cf87813","name":"Limit articles used","func":"// --------------------\n// Limit number of RSS articles and use title field\n// --------------------\n\n// Retrieve the processed count from flow context (initialize to 0 if not set)\nlet count = flow.get('processedCount') || 0; \nlet numItems = flow.get('numItems') || 5;\n\n// Process the message only if we haven't processed the required number of items yet\nif (count < numItems) {\n    count += 1;  // Increment the processed count\n\n    // Use the article.title field if available, fallback to msg.payload\n    let messageContent = msg.article?.title || msg.payload || \"\";\n\n    // Truncate the message if it's longer than 198 characters\n    if (messageContent.length > 198) {\n        messageContent = messageContent.slice(0, 198);  \n    }\n\n    // Save the truncated text in msg.article for downstream nodes\n    msg.article = messageContent;\n\n    // Preserve for later use (e.g., TinyURL concatenation)\n    msg.infoText = messageContent;\n\n    // Update processed count in flow context\n    flow.set('processedCount', count);\n\n    return msg;\n} else {\n    // Stop processing extra articles\n    return null;\n}\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":670,"y":240,"wires":[["21e8d6ef80b3cc2e"]]},{"id":"9571c14a10eb09ac","type":"inject","z":"2cd572b50cf87813","name":"Test 99","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"/l3kn,99","payloadType":"str","x":150,"y":340,"wires":[["97863d3440213bf0"]]},{"id":"0a9c256463a58b0a","type":"delay","z":"2cd572b50cf87813","name":"","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"4","nbRateUnits":"1","rateUnits":"minute","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":710,"y":80,"wires":[["22f636706a835d4f"]]},{"id":"21e8d6ef80b3cc2e","type":"change","z":"2cd572b50cf87813","name":"Extract URL","rules":[{"t":"set","p":"payload","pt":"msg","to":"topic","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":870,"y":240,"wires":[["29c199d9580b06dc"]]},{"id":"f887970115e95b47","type":"http request","z":"2cd572b50cf87813","name":"Get TinyURL","method":"GET","ret":"txt","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":870,"y":300,"wires":[["677c8b11f4bc72f5"]]},{"id":"ea1a9e80430b66f0","type":"inject","z":"2cd572b50cf87813","name":"Test 2 with URL","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"/l3kn,2,u","payloadType":"str","x":120,"y":380,"wires":[["97863d3440213bf0"]]},{"id":"96aba36a10939274","type":"function","z":"2cd572b50cf87813","name":"Set \"append URL\" flag","func":"let inputString = msg.payload;\n\n// Check if the string contains \",u\" (case-insensitive)\nlet hasTinyUrl = inputString.toLowerCase().includes(',u');\nflow.set('tinyurlFlag', hasTinyUrl ? 1 : 0);\n\n// Just in case the message is wanted for other nodes...\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":400,"y":260,"wires":[[]]},{"id":"677c8b11f4bc72f5","type":"function","z":"2cd572b50cf87813","name":"Assemble output","func":"// Fetches the BBC RSS news feed and has a timeout\n// in case it stalls.\n\n// Configuration\nconst TIMEOUT_MS = flow.get('assemblyTimeout') || 1000; // Configurable timeout\n\n// Initialize context variables if they don't exist\nlet accumulated = context.get('accumulated') || '';\nlet timer = context.get('timer');\n\n// Retrieve the article text (msg.article) and TinyURL (msg.payload)\nlet articleText = '- ' + msg.article;\nlet tinyUrl = msg.payload;\nlet maxLength = 196;\n\n// Retrieve the flow context variable that indicates if we should append the TinyURL\nlet tinyurlFlag = flow.get('tinyurlFlag') || 0;\n\n// Format the current message\nlet formattedMessage;\nif (tinyurlFlag === 1) {\n    // Calculate remaining space for the article text after appending the TinyURL and a space\n    let remainingSpace = maxLength - tinyUrl.length - 1;\n\n    if (remainingSpace < articleText.length) {\n        articleText = articleText.substring(0, remainingSpace);\n    }\n\n    formattedMessage = articleText + ' ' + tinyUrl;\n} else {\n    formattedMessage = articleText.substring(0, maxLength);\n}\n\n// Add to accumulated string with \\n separator\nif (accumulated === '') {\n    accumulated = formattedMessage;\n} else {\n    accumulated += '\\n' + formattedMessage;\n}\n\n// Clear any existing timer\nif (timer) {\n    clearTimeout(timer);\n}\n\n// Set new timer to send accumulated messages after timeout\ntimer = setTimeout(() => {\n    let outputMsg = { ...msg };\n    // Add trailing \\n to the accumulated string\n    outputMsg.payload = accumulated + '\\n';\n\n    // Clear context\n    context.set('accumulated', '');\n    context.set('timer', null);\n\n    // Send the accumulated messages\n    outputMsg.payload = 'BBC NEWS SUMMARY\\n' + accumulated\n    node.send(outputMsg);\n}, TIMEOUT_MS);\n\n// Save updated context\ncontext.set('accumulated', accumulated);\ncontext.set('timer', timer);\n\n// Don't send anything yet\nreturn null;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":670,"y":360,"wires":[["3afdfc91001a4d0b","4e760576267c9d6e"]]},{"id":"1c3a7fcfbaa92359","type":"inject","z":"2cd572b50cf87813","name":"Test no num","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"/l3kn,u","payloadType":"str","x":130,"y":220,"wires":[["97863d3440213bf0"]]},{"id":"36e38b7485e44524","type":"inject","z":"2cd572b50cf87813","name":"Test 1","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"/l3kn,1","payloadType":"str","x":150,"y":260,"wires":[["97863d3440213bf0"]]},{"id":"92d8cad719a38e98","type":"function","z":"2cd572b50cf87813","name":"Set number of articles","func":"// Parse input to set numItems\nlet inputString = msg.payload.trim();\nlet numItems = 5;  // Default numItems value\n\n// Check if the string contains a comma followed by a number anywhere in the string\nlet regex = /,(\\d+)/;\nlet match = inputString.match(regex);\n\nif (match) {\n    numItems = parseInt(match[1]);\n    numItems = Math.min(numItems, 10);  // Limit numItems to 10\n}\n\nflow.set('numItems', numItems);\n\n// Reset the processed count to 0 (start fresh for the new batch)\nflow.set('processedCount', 0);\n\n// Reset the 'alreadyProcessed' flag so that it doesn't block future messages\nflow.set('alreadyProcessed', false);\n\n// Store numItems in msg for later use\nmsg.numItems = numItems;\nmsg.payload = numItems;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":400,"y":300,"wires":[[]]},{"id":"727523bcd37c4a9e","type":"inject","z":"2cd572b50cf87813","name":"Test 5 with URL","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"/l3kn,5,u","payloadType":"str","x":120,"y":420,"wires":[["97863d3440213bf0"]]},{"id":"40dc304b4b0f861f","type":"comment","z":"2cd572b50cf87813","name":"News notes","info":"The default flow retrieves news headlines and descriptions \nfrom the BBC RSS service.\n\nInput options:\n\nDefault = 5 articles returned. Example: /l3kn\n\n,[number] Returns that many headlines (maximum 10).\nExample: /l3kn,5\n\n,u Returns headlines with a TinyURL link at the end pointing to \nthe full article on the BBC News site.\n\nExamples: /l3kn,u /l3kn,5,u /l3kn,u,5\n\nHeadlines are truncated to fit a single message, including the TinyURL if added.\n\nThis flow can be modified to retrieve news from other sources.\nIf applicable, other news flows will be made available on the project’s GitHub page.\n\nIf you develop a new flow for another news source, please share it.","x":170,"y":80,"wires":[]},{"id":"9edd029dc17e165c","type":"link in","z":"2cd572b50cf87813","name":"Reset rate limits","links":["e35468c6723cae50"],"x":555,"y":80,"wires":[["0a9c256463a58b0a"]]},{"id":"29c199d9580b06dc","type":"function","z":"2cd572b50cf87813","name":"Format request","func":"// Get the long URL from msg.payload\nlet longUrl = msg.payload;\n\n// Check if the long URL is valid\nif (!longUrl || typeof longUrl !== 'string') {\n    node.error(\"Invalid URL\", msg);\n    return null;  // Exit the function if the URL is invalid\n}\n\n// Check if the URL contains a '?'\nlet questionMarkIndex = longUrl.indexOf('?');\n\n// If it contains a '?', remove everything after it, including the '?' itself\nif (questionMarkIndex !== -1) {\n    longUrl = longUrl.substring(0, questionMarkIndex);  // Keep the part before '?'\n}\n\n// Prepare the URL for TinyURL\nlet tinyUrlApi = `https://tinyurl.com/api-create.php?url=${encodeURIComponent(longUrl)}`;\n\n// Set the HTTP request configuration\nmsg.url = tinyUrlApi;  // TinyURL API endpoint\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":660,"y":300,"wires":[["f887970115e95b47"]]},{"id":"49d153f55ef6c49d","type":"http request","z":"7098087e5313f3ae","name":"Get Zen Quote","method":"GET","ret":"obj","paytoqs":"ignore","url":"https://zenquotes.io/api/random","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":520,"y":120,"wires":[["49afab087cb9974f"]]},{"id":"49afab087cb9974f","type":"function","z":"7098087e5313f3ae","name":"Format Zen Quote","func":"let quote = msg.payload[0].q;  // The quote text\nlet author = msg.payload[0].a; // The author\n\nif (quote.trim().length === 0) {\n        return null;\n    }\n    \nmsg.payload = 'Zen quote: ' + quote; \n \nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":530,"y":180,"wires":[["645b610e410224ee","af2733951ebc11fa"]]},{"id":"fed2cfa85baaa20d","type":"inject","z":"7098087e5313f3ae","name":"Test","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"true","payloadType":"bool","x":210,"y":180,"wires":[["efc29dc84f7fb419"]]},{"id":"847d4ed6a2c367c6","type":"link out","z":"7098087e5313f3ae","name":"MOTD out","mode":"link","links":["83918985b6d1aa7a"],"x":925,"y":120,"wires":[]},{"id":"0821a0f25689d689","type":"link in","z":"7098087e5313f3ae","name":"Zen trigger","links":["80e4760fcda6f6e1"],"x":155,"y":120,"wires":[["efc29dc84f7fb419"]]},{"id":"645b610e410224ee","type":"delay","z":"7098087e5313f3ae","name":"","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"4","nbRateUnits":"1","rateUnits":"minute","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":790,"y":120,"wires":[["847d4ed6a2c367c6"]]},{"id":"af2733951ebc11fa","type":"debug","z":"7098087e5313f3ae","name":"Zen quote","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":780,"y":180,"wires":[]},{"id":"2940f2a5e8038793","type":"link in","z":"7098087e5313f3ae","name":"Reset rate limits","links":["e35468c6723cae50"],"x":665,"y":60,"wires":[["645b610e410224ee"]]},{"id":"3a1abff1a8b679f3","type":"comment","z":"7098087e5313f3ae","name":"Notes","info":"Fetches inspirational messages from https://zenquotes.io/","x":190,"y":60,"wires":[]},{"id":"efc29dc84f7fb419","type":"function","z":"7098087e5313f3ae","name":"Set http timeout","func":"msg.requestTimeout = 10000;  // 10 seconds\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":320,"y":120,"wires":[["49d153f55ef6c49d"]]},{"id":"7f2d9e81d7a5504c","type":"link in","z":"654c666c7ffd7e3a","name":"Weather trigger","links":["0022bcd6eadb47f3"],"x":115,"y":160,"wires":[["8dd82011ef5f8c0f"]]},{"id":"ac482826544eea97","type":"debug","z":"654c666c7ffd7e3a","name":"Full String","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":860,"y":240,"wires":[]},{"id":"c2abec17afb88552","type":"link out","z":"654c666c7ffd7e3a","name":"Weather / Astro out","mode":"link","links":["83918985b6d1aa7a"],"x":805,"y":300,"wires":[]},{"id":"9e49e457436b7af5","type":"inject","z":"654c666c7ffd7e3a","name":"Weather test","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"true","payloadType":"bool","x":190,"y":220,"wires":[["8dd82011ef5f8c0f"]]},{"id":"8dd82011ef5f8c0f","type":"function","z":"654c666c7ffd7e3a","name":"Met Norway","func":"// V1.2 20251007\n\nmsg.requestTimeout = 10000;  // 10 seconds\n\n// Get email address for Met Norway API compliance\nlet emailForMetNorway = global.get('emailAddrForMetNorway') || '';\n\n// Check if email is set - Met Norway requires valid contact email\nif (emailForMetNorway.trim() === '') {\n    node.warn('Met Norway API call blocked: emailAddrForMetNorway not set in global variables');\n    return null;\n}\n\n// Get coordinates from global context, fallback to centre of London\nlet lat = global.get('latitude') || 51.5074;\nlet lon = global.get('longitude') || -0.1278;\n\n// MET Norway Locationforecast compact API endpoint\nmsg.url = `https://api.met.no/weatherapi/locationforecast/2.0/compact?lat=${lat}&lon=${lon}`;\n\n// MET Norway requires a proper User-Agent header with contact email\nlet version = global.get('version') || 'MeshBop V0.10';\nmsg.headers = {\n    'User-Agent': `Node-RED-${version} (${emailForMetNorway})`\n};\n\nmsg.method = 'GET';\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":160,"wires":[["cad507f1334800c5"]]},{"id":"cad507f1334800c5","type":"http request","z":"654c666c7ffd7e3a","name":"","method":"use","ret":"txt","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":410,"y":220,"wires":[["26e80a405e96e3bb"]]},{"id":"26e80a405e96e3bb","type":"function","z":"654c666c7ffd7e3a","name":"Weather Info Met Norway","func":"/*\nProcess MET Norway weather data and generate a summary string.\nFirst output: structured weather object with extended parameters under msg.payload.weather.\nSecond output: human-readable summary.\n\nV1.1 20251010\n*/\n\n// Parse payload\nvar weatherData;\nif (typeof msg.payload === \"string\") {\n    try {\n        weatherData = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON: \" + e.message);\n        return null;\n    }\n} else if (typeof msg.payload === \"object\") {\n    weatherData = msg.payload;\n} else {\n    node.error(\"Unexpected payload type: \" + typeof msg.payload);\n    return null;\n}\n\n// Ensure timeseries exists\nif (!weatherData?.properties?.timeseries || weatherData.properties.timeseries.length === 0) {\n    node.error(\"Invalid payload structure. Expected 'properties.timeseries'\");\n    return null;\n}\n\n// Current timestamp data\nvar ts0 = weatherData.properties.timeseries[0].data;\nvar current = ts0.instant.details;\n\n// Forecasted interval (prefer next_1_hours)\nvar forecastInterval = ts0.next_1_hours || ts0.next_6_hours || ts0.next_12_hours;\nvar forecastDetails = forecastInterval?.details || {};\n\n// Compass conversion\nvar compassDirections = [\"North\", \"North-East\", \"East\", \"South-East\", \"South\", \"South-West\", \"West\", \"North-West\"];\nvar windAngle = current.wind_from_direction;\nvar wind_from_direction_text = compassDirections[Math.round(((windAngle %= 360) < 0 ? windAngle + 360 : windAngle) / 45) % 8];\n\n// Air pressure trend\nvar pressure_trend = \"\";\nif (forecastDetails.air_pressure_at_sea_level !== undefined && forecastDetails.air_pressure_at_sea_level !== null) {\n    if (forecastDetails.air_pressure_at_sea_level > current.air_pressure_at_sea_level) {\n        pressure_trend = \"rising\";\n    } else if (forecastDetails.air_pressure_at_sea_level < current.air_pressure_at_sea_level) {\n        pressure_trend = \"falling\";\n    } else {\n        pressure_trend = \"steady\";\n    }\n} else {\n    pressure_trend = \"trend unset\";  // Fallback if no forecast pressure data\n}\n\n// Forecast symbol code\nvar symbol_code = forecastInterval?.summary?.symbol_code || \"clearsky_day\";\n\n// MET Norway description map\nvar metDescriptionMap = {\n    \"clearsky_day\": \"Clear sky\", \"clearsky_night\": \"Clear night sky\",\n    \"fair_day\": \"Mainly clear\", \"fair_night\": \"Mainly clear night\",\n    \"partlycloudy_day\": \"Partly cloudy\", \"partlycloudy_night\": \"Partly cloudy night\",\n    \"cloudy\": \"Overcast\", \"fog\": \"Fog\", \"heavyrain\": \"Heavy rain\", \"lightrain\": \"Light rain\",\n    \"rainshowers_day\": \"Rain showers\", \"rainshowers_night\": \"Rain showers at night\",\n    \"lightsnow\": \"Light snow\", \"heavysnow\": \"Heavy snow\", \"thunderstorm\": \"Thunderstorm\",\n    \"sleet\": \"Sleet\", \"lightrainshowers_day\": \"Light rain showers\", \"lightrainshowers_night\": \"Light rain showers at night\",\n    \"heavyrainshowers_day\": \"Heavy rain showers\", \"heavyrainshowers_night\": \"Heavy rain showers at night\",\n    \"lightsnowshowers_day\": \"Light snow showers\", \"lightsnowshowers_night\": \"Light snow showers at night\",\n    \"heavysnowshowers_day\": \"Heavy snow showers\", \"heavysnowshowers_night\": \"Heavy snow showers\"\n};\n\n// Open-Meteo numeric code map\nvar metToOpenMeteo = {\n    \"clearsky_day\": 0, \"clearsky_night\": 0,\n    \"fair_day\": 1, \"fair_night\": 1,\n    \"partlycloudy_day\": 2, \"partlycloudy_night\": 2,\n    \"cloudy\": 3, \"fog\": 45,\n    \"heavyrain\": 65, \"lightrain\": 61,\n    \"rainshowers_day\": 63, \"rainshowers_night\": 63,\n    \"lightsnow\": 71, \"heavysnow\": 75,\n    \"thunderstorm\": 95, \"sleet\": 63,\n    \"lightrainshowers_day\": 61, \"lightrainshowers_night\": 61,\n    \"heavyrainshowers_day\": 65, \"heavyrainshowers_night\": 65,\n    \"lightsnowshowers_day\": 71, \"lightsnowshowers_night\": 71,\n    \"heavysnowshowers_day\": 75, \"heavysnowshowers_night\": 75\n};\n\n// Extract UV index safely from forecast interval\nvar uvIndex = ts0.next_1_hours?.details?.uv_index_clear_sky || 0;\n\n// Build structured weather object with extended parameters\nvar weather = {\n    wind_from_direction: current.wind_from_direction,\n    wind_from_direction_text: wind_from_direction_text,\n    wind_speed: Math.round(current.wind_speed * 0.621371 * 2) / 2, // mph\n    wind_speed_of_gust: current.wind_speed_of_gust,\n    air_temperature: current.air_temperature.toFixed(1),\n    apparent_temperature: current.apparent_temperature ? current.apparent_temperature.toFixed(1) : current.air_temperature.toFixed(1),\n    air_pressure_at_sea_level: current.air_pressure_at_sea_level,\n    pressure_trend: pressure_trend,\n    relative_humidity: current.relative_humidity,\n    dew_point_temperature: current.dew_point_temperature,\n    cloud_area_fraction: current.cloud_area_fraction,\n    cloud_area_fraction_high: current.cloud_area_fraction_high,\n    cloud_area_fraction_medium: current.cloud_area_fraction_medium,\n    cloud_area_fraction_low: current.cloud_area_fraction_low,\n    fog_area_fraction: current.fog_area_fraction,\n    uv_index_clear_sky: uvIndex,\n    symbol_code: symbol_code,\n    weather_description: metDescriptionMap[symbol_code] || \"Unknown\",\n    weather_code_open_meteo: metToOpenMeteo[symbol_code] || 0,\n    precipitation_amount: forecastDetails.precipitation_amount,\n    probability_of_precipitation: forecastDetails.probability_of_precipitation,\n    probability_of_thunder: forecastDetails.probability_of_thunder,\n    interval: forecastInterval ? Object.keys(ts0).find(k => ts0[k] === forecastInterval) : \"fallback\"\n};\n\n// Wrap under payload.weather while preserving existing msg properties\nvar weatherOutput = { ...msg, payload: { weather: weather } };\n\n// Human-readable summary while preserving msg properties\nvar locationName = global.get(\"location\") || \"Chichester\";\nvar intervalTextMap = {\n    \"next_1_hours\": \"Next 1 hour\",\n    \"next_6_hours\": \"Next 6 hours\",\n    \"next_12_hours\": \"Next 12 hours\",\n    \"fallback\": \"Current conditions\"\n};\n\nvar fullWeatherString = {\n    ...msg,\n    payload: locationName + \": \" +\n        weather.weather_description +\n        '. Temp: ' + weather.air_temperature + \"C\" +\n        '. Feels like: ' + weather.apparent_temperature + \"C\" +\n        '. Wind: ' + weather.wind_speed + 'mph ' + weather.wind_from_direction_text +\n        '. Pressure: ' + weather.air_pressure_at_sea_level + ' mb (' + (weather.pressure_trend || \"trend unset\") + ')' +  // Fallback for empty pressure_trend\n        '. UV Index: ' + weather.uv_index_clear_sky +\n        '. Forecast: ' + (intervalTextMap[weather.interval] || weather.interval) +\n        ' (Data from MET Norway).'\n};\n\n// Return outputs\nreturn [weatherOutput, fullWeatherString];\n","outputs":2,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":630,"y":220,"wires":[["60a44934a7f92312"],["c2abec17afb88552","ac482826544eea97"]]},{"id":"756b93df47469102","type":"comment","z":"654c666c7ffd7e3a","name":"Met Norway note","info":"Best for Europe.\n\nCoverage:\n\nEurope & Nordic countries:\nFull, highly reliable coverage with detailed forecasts.\n\nRest of the world:\nWorks for most locations (latitude/longitude), but:\n\nForecast quality may be lower outside Europe.\nSome small islands or remote regions might have less accurate or missing data.\n\n*** IMPORTANT: Met Norway requires a valid contact email in case of API abuse.\nNot setting this violates their terms of service. ***\n\nPlease add a valid contact email address in the setup function node on the first tab.\nIf it is not set, this flow will not run.\n\nThe function block has two outputs. The first provides an object containing all the component\nweather information. The second sends out a summary string.\n\nThe weather object includes a weather code that maps the Met Norway weather\ndescriptions to Open-Meteo weather codes. Mapping is done on a “best fit” basis.","x":180,"y":80,"wires":[]},{"id":"60a44934a7f92312","type":"debug","z":"654c666c7ffd7e3a","name":"Weather object","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":880,"y":200,"wires":[]},{"id":"05bbb564ebb7d488","type":"function","z":"e186f0d592d0cb40","name":"Generate a warning","func":"const feed = msg.payload;\n\n// Check for a valid RSS structure with at least one item\nif (\n    !feed.rss ||\n    !Array.isArray(feed.rss.channel) ||\n    feed.rss.channel.length === 0 ||\n    !Array.isArray(feed.rss.channel[0].item) ||\n    feed.rss.channel[0].item.length === 0\n) {\n    return null; // No warnings — return no output\n}\n\n// Extract the first warning item\nconst firstItem = feed.rss.channel[0].item[0];\n\nnode.warn('Full: ' + firstItem);\n\n// Extract and trim the description\nlet description = firstItem.description?.[0]?.trim() || \"\";\ndescription = description.substring(0, 198);\n\n// Extract the URL from the guid field\nconst url = firstItem.guid?.[0]?._ || \"\";\n\n// Assign to message fields\nmsg.payload = description;\nmsg.message = description;\nmsg.url = url;\n\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":450,"y":220,"wires":[["3f9362d2a94174dd"]]},{"id":"5d95349572228af0","type":"inject","z":"e186f0d592d0cb40","name":"Test short  msg","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"rss\":{\"channel\":[{\"item\":[{\"title\":[\"**TEST MESSAGE** Yellow warning of thunderstorm\"],\"description\":[\"**TEST** MESSAGE Yellow warning of thunderstorms affecting London & South East England: valid from 1000 Wed 03 Sep to 1900 Wed 03 Sep.\"],\"guid\":[{\"_\":\"https://example.com/yellow-thunderstorm\"}]}]}]}}","payloadType":"json","x":140,"y":260,"wires":[["05bbb564ebb7d488"]]},{"id":"ba1a83b60d03bb6c","type":"xml","z":"e186f0d592d0cb40","name":"","property":"payload","attr":"","chr":"","x":770,"y":100,"wires":[["05bbb564ebb7d488"]]},{"id":"3ccdf97b74e78398","type":"debug","z":"e186f0d592d0cb40","name":"Assembled warning message","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":940,"y":220,"wires":[]},{"id":"3f9362d2a94174dd","type":"function","z":"e186f0d592d0cb40","name":"Get Tinyurl","func":"msg.requestTimeout = 10000;  // 10 seconds\n\n// Get the long URL from msg.payload\nlet longUrl = msg.url;\n\n// Check if the long URL is valid\nif (!longUrl || typeof longUrl !== 'string') {\n    node.error(\"Invalid URL\", msg);\n    return null;  // Exit the function if the URL is invalid\n}\n\n// Check if the URL contains a '?'\nlet questionMarkIndex = longUrl.indexOf('?');\n\n// If it contains a '?', remove everything after it, including the '?' itself\nif (questionMarkIndex !== -1) {\n    longUrl = longUrl.substring(0, questionMarkIndex);  // Keep the part before '?'\n}\n\n// Prepare the URL for TinyURL\nlet tinyUrlApi = `https://tinyurl.com/api-create.php?url=${encodeURIComponent(longUrl)}`;\n\n// Set the HTTP request configuration\nmsg.url = tinyUrlApi;  // TinyURL API endpoint\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":650,"y":220,"wires":[["d6f623c12fe579de"]]},{"id":"d6f623c12fe579de","type":"http request","z":"e186f0d592d0cb40","name":"","method":"GET","ret":"txt","paytoqs":"ignore","url":"","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":430,"y":280,"wires":[["b564e0c9ee6644b1"]]},{"id":"b564e0c9ee6644b1","type":"function","z":"e186f0d592d0cb40","name":"Assemble message","func":"let message = msg.message || \"\";\nlet tinyurl = msg.payload || \"\";\n\n// Heading text goes into the first chunk\nlet heading = \"UK MET OFFICE SEVERE WEATHER WARNING: \";\nlet text = heading + message.trim();\n\n// Append tiny URL at the end\nlet fullText = text + \" \" + tinyurl;\n\n// Pass full text for chunking\nmsg.payload = fullText.trim();\nmsg.topic = \"MeshBop: SEVERE WEATHER WARNING\";\n\n// Optional: keep tinyurl separately if you want to reference it later\nmsg.tinyurl = tinyurl;\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":670,"y":280,"wires":[["a2f23c6bcbbd88ab","3ccdf97b74e78398","5f5fc19a729dd5ac"]]},{"id":"3450fb45efdab55b","type":"inject","z":"e186f0d592d0cb40","name":"Test long msg","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"rss\":{\"channel\":[{\"item\":[{\"title\":[\"TEST MESSAGE Amber warning of heavy rain and flooding\"],\"description\":[\"TEST MESSAGE Amber warning of heavy rain and flooding affecting multiple counties including Herefordshire, Shropshire, Staffordshire, Worcestershire, and surrounding areas. Rain expected to be persistent and heavy from early morning through late evening, causing potential road closures, power outages, and disruption to public transport services.\"],\"guid\":[{\"_\":\"https://example.com/amber-heavy-rain\"}]}]}]}}","payloadType":"json","x":130,"y":300,"wires":[["05bbb564ebb7d488"]]},{"id":"4133147d69bfe913","type":"link out","z":"e186f0d592d0cb40","name":"Severe weather Tx out","mode":"link","links":["83918985b6d1aa7a"],"x":885,"y":340,"wires":[]},{"id":"eca6712944eecac5","type":"comment","z":"e186f0d592d0cb40","name":"Notes: Severe weather warnings","info":"This flow runs regularly via an inject node that auto-triggers.\n\nThe first part of the flow retrieves severe weather information from the UK\nMet Office using one of the regional RSS feeds from the list below.\n\nThe flow will need to be modified if warnings need to come from a\ndifferent weather service, or if the Met Office changes the format\nof their warnings.\n\nList of Met Office RSS feeds:\nhttps://weather.metoffice.gov.uk/guides/rss\n\nThis flow sends a Tx message when a warning is available, and it can also\nsend an email — enable this link if you wish.\n\nThe second part of this flow retrieves thunderstorm and high wind warnings\nfrom Open-Meteo. This section is disabled by default but can be enabled and\nused if the UK Met Office is not suitable for your needs.\n\nRemember to set your latitude and longitude on the first tab so that the\nweather information is retrieved for the correct location.\n\nDisable the Async Out node on the Rx/Tx tab while testing any changes made here.\nRe-enable it when you are sure everything is working as expected.\n\nRegional customisations may be available on the project’s GitHub page:\nhttps://github.com/linker3000/MeshBop\n","x":170,"y":40,"wires":[]},{"id":"b331e46a7a57f26c","type":"http request","z":"e186f0d592d0cb40","name":"Met office http request","method":"GET","ret":"txt","paytoqs":"ignore","url":"https://weather.metoffice.gov.uk/public/data/PWSCache/WarningsRSS/Region/se","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":560,"y":100,"wires":[["ba1a83b60d03bb6c"]]},{"id":"85e324950318af04","type":"inject","z":"e186f0d592d0cb40","name":"Test no warning","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"rss\":{\"channel\":[{\"title\":[\"**TEST** Met Office warnings for region\"],\"description\":[\"**TEST** Weather warnings of severe and extreme weather from the Met Office\"]}]}}","payloadType":"json","x":140,"y":220,"wires":[["05bbb564ebb7d488"]]},{"id":"3999321e4a63bc44","type":"function","z":"e186f0d592d0cb40","d":true,"name":"Format Open-Meteo call","func":"msg.requestTimeout = 10000;  // 10 seconds\n\n// Get coordinates from global context, fallback to centre of London\nlet lat = global.get('latitude') || 51.5074;\nlet lon = global.get('longitude') || -0.1278;\nconst timezone = global.get('timezone') || 'Europe/London';\n\n// Get relevant weather info from call to Open-Meteo\nmsg.url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current=weather_code,wind_speed_10m&timezone=${timezone}`;\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":390,"y":500,"wires":[["049c3279692153e0"]]},{"id":"049c3279692153e0","type":"http request","z":"e186f0d592d0cb40","d":true,"name":"","method":"GET","ret":"txt","paytoqs":false,"url":"","persist":false,"insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":610,"y":500,"wires":[["ac89bcdc225b8e69","790de831f01ae51e"]]},{"id":"06e1d584075b4555","type":"inject","z":"e186f0d592d0cb40","d":true,"name":"Boring weather","props":[{"p":"payload"},{"p":"test","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"current\":{\"weather_code\":1,\"wind_speed_10m\":10}}","payloadType":"json","x":140,"y":520,"wires":[["ac89bcdc225b8e69"]]},{"id":"ac89bcdc225b8e69","type":"function","z":"e186f0d592d0cb40","d":true,"name":"Check for thunderstorms and high wind","func":"// Handle different response formats from HTTP request\nvar weatherData;\nif (typeof msg.payload === \"string\") {\n    try {\n        weatherData = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON: \" + e.message);\n        return null;\n    }\n} else if (typeof msg.payload === \"object\") {\n    weatherData = msg.payload;\n} else {\n    node.error(\"Unexpected payload type: \" + typeof msg.payload);\n    return null;\n}\n\n// Check if we have the expected structure\nif (!weatherData || !weatherData.current) {\n    node.error(\"Invalid payload structure. Expected current weather data\");\n    return null;\n}\n\n// Extract weather data\nvar weatherCode = weatherData.current.weather_code;\nvar windSpeed = weatherData.current.wind_speed_10m;\nvar region = global.get('region') || 'London';\n\nvar hasThunderstorms = weatherCode >= 95;\nvar hasStrongWinds = windSpeed > 50;\n\n// Helper to prefix if msg.test is true\nfunction formatMessage(text) {\n    return msg.test === true ? `**Test message** ${text}` : text;\n}\n\n// Check all combinations\nif (hasThunderstorms && hasStrongWinds) {\n    var windSpeedMph = Math.round(windSpeed * 0.621371 * 2) / 2;\n    msg.payload = formatMessage(\n        `Thunderstorms and strong winds forecast in the region around ${region} (${windSpeedMph} mph) (Open-Meteo).`\n    );\n    return msg;\n} else if (hasThunderstorms) {\n    msg.payload = formatMessage(\n        `Thunderstorms forecast in the region around ${region} (Open-Meteo).`\n    );\n    return msg;\n} else if (hasStrongWinds) {\n    var windSpeedMph = Math.round(windSpeed * 0.621371 * 2) / 2;\n    msg.payload = formatMessage(\n        `Strong winds forecast in the region around ${region} (${windSpeedMph} mph) (Open-Meteo).`\n    );\n    return msg;\n}\n\n// No severe weather detected\nreturn null;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":450,"y":560,"wires":[["502c4c21b4eb534e","5e0b829fad0d5eec"]]},{"id":"502c4c21b4eb534e","type":"debug","z":"e186f0d592d0cb40","d":true,"name":"Open-Meteo thunder/wind","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":650,"y":620,"wires":[]},{"id":"5e0b829fad0d5eec","type":"link out","z":"e186f0d592d0cb40","d":true,"name":"Open-Meteo weather warning","mode":"link","links":["83918985b6d1aa7a","7f06ec2eaadca2f2"],"x":795,"y":560,"wires":[]},{"id":"3ac5f60cb438adb7","type":"inject","z":"e186f0d592d0cb40","d":true,"name":"Test thunder","props":[{"p":"payload"},{"p":"test","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"current\":{\"weather_code\":95,\"wind_speed_10m\":25}}","payloadType":"json","x":130,"y":560,"wires":[["ac89bcdc225b8e69"]]},{"id":"edcde390875919d4","type":"inject","z":"e186f0d592d0cb40","d":true,"name":"Test windspeed","props":[{"p":"payload"},{"p":"test","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"current\":{\"weather_code\":2,\"wind_speed_10m\":65}}","payloadType":"json","x":140,"y":600,"wires":[["ac89bcdc225b8e69"]]},{"id":"5f035ad11f73e127","type":"inject","z":"e186f0d592d0cb40","d":true,"name":"Test both","props":[{"p":"payload"},{"p":"test","v":"true","vt":"bool"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"{\"current\":{\"weather_code\":96,\"wind_speed_10m\":75}}","payloadType":"json","x":120,"y":640,"wires":[["ac89bcdc225b8e69"]]},{"id":"5f5fc19a729dd5ac","type":"function","z":"e186f0d592d0cb40","name":"Prepare email","func":"// Clean message before sending email\nlet newMsg = {\n    to: msg.to || global.get('emailTo'),\n    from: msg.from || global.get('emailFrom'),\n    topic: msg.topic || \"Severe Weather Warning\",\n    payload: msg.payload || \"No content\"\n};\n\nreturn newMsg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":680,"y":340,"wires":[["c154a8c79aa55895","fcd0fa364da166cc"]]},{"id":"c154a8c79aa55895","type":"link out","z":"e186f0d592d0cb40","name":"Severe weather email out","mode":"link","links":["7f06ec2eaadca2f2"],"x":885,"y":380,"wires":[]},{"id":"a2f23c6bcbbd88ab","type":"subflow:2c9d2a03adf9c644","z":"e186f0d592d0cb40","name":"","x":890,"y":280,"wires":[["4133147d69bfe913"]]},{"id":"fcd0fa364da166cc","type":"debug","z":"e186f0d592d0cb40","name":"Prepared email","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":900,"y":440,"wires":[]},{"id":"d7facdef29f9338d","type":"link in","z":"e186f0d592d0cb40","name":"Check severe weather warnings","links":["e66afa4bc5f6d4f4"],"x":195,"y":100,"wires":[["3999321e4a63bc44","cc32de5413c915dd"]]},{"id":"fc93b0314f3d3cc6","type":"inject","z":"e186f0d592d0cb40","d":true,"name":"Test Open-Meteo","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"true","payloadType":"bool","x":140,"y":480,"wires":[["3999321e4a63bc44"]]},{"id":"790de831f01ae51e","type":"debug","z":"e186f0d592d0cb40","d":true,"name":"Open-Meteo","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":890,"y":500,"wires":[]},{"id":"cc32de5413c915dd","type":"function","z":"e186f0d592d0cb40","name":"Set http timeout","func":"msg.requestTimeout = 10000;  // 10 seconds\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":340,"y":100,"wires":[["b331e46a7a57f26c"]]},{"id":"b4ebe76aad1119e0","type":"inject","z":"02096f24b6634fbd","name":"Trigger Sea & Tide","props":[],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"x":170,"y":160,"wires":[["fd828801553bd67c"]]},{"id":"fd828801553bd67c","type":"function","z":"02096f24b6634fbd","name":"Build Open-Meteo URL","func":"msg.requestTimeout = 10000;  // 10 seconds\n\n// Read sea globals\nlet lat = global.get('seaLatitude');\nlet lon = global.get('seaLongitude');\nlet seaLoc = global.get('seaLoc') || `${lat},${lon}`;\n\nif (!lat || !lon) {\n    node.error(\"Sea latitude/longitude not set\", msg);\n    msg.SeaInfo = null;\n    return msg;\n}\n\nmsg.url = `https://marine-api.open-meteo.com/v1/marine?latitude=${lat}&longitude=${lon}&hourly=wave_height,wave_direction,sea_surface_temperature&current=wave_height,wave_direction,wind_wave_height,swell_wave_height,sea_level_height_msl,sea_surface_temperature&forecast_days=3&timezone=auto`;\nmsg.SeaInfo = null;\nmsg.seaLoc = seaLoc;\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":400,"y":120,"wires":[["0b5a4677855bac0a"]]},{"id":"0b5a4677855bac0a","type":"http request","z":"02096f24b6634fbd","name":"Fetch Sea Data","method":"GET","ret":"obj","paytoqs":"ignore","url":"","x":620,"y":120,"wires":[["c2958755016774f5","aee004b354b18672"]]},{"id":"c2958755016774f5","type":"function","z":"02096f24b6634fbd","name":"Process Sea Data","func":"// Extract current sea info\nlet data = msg.payload;\nlet seaLoc = msg.seaLoc || 'unknown location';\n\n// Helper to convert degrees to compass abbreviation\nfunction degreesToCompass(deg) {\n    const directions = ['N', 'NNE', 'NE', 'ENE', 'E', 'ESE', 'SE', 'SSE', 'S', 'SSW', 'SW', 'WSW', 'W', 'WNW', 'NW', 'NNW', 'N'];\n    return directions[Math.round(deg / 22.5) % 16];\n}\n\nif (data && data.current) {\n    let cur = data.current;\n    let waveDeg = cur.wave_direction ?? 0;\n    let waveDirAbbr = degreesToCompass(waveDeg);\n\n    msg.SeaInfo = `Sea state at ${seaLoc}: Waves ${cur.wave_height ?? 'N/A'}m @ ${waveDeg}° (${waveDirAbbr}), Wind waves ${cur.wind_wave_height ?? 'N/A'}m, Swell ${cur.swell_wave_height ?? 'N/A'}m, SST ${cur.sea_surface_temperature ?? 'N/A'}°C`;\n} else {\n    msg.SeaInfo = null;\n}\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":860,"y":120,"wires":[["cb90fdb3bbf9af45"]]},{"id":"cb90fdb3bbf9af45","type":"function","z":"02096f24b6634fbd","name":"Build Admiralty Tide URL","func":"msg.requestTimeout = 10000;  // 10 seconds\n\n// Read global tide info\nlet tideStationId = global.get('tideStationId');\nlet tideLoc = global.get('tideLoc') || 'Unknown location';\n\nmsg.tideLoc = tideLoc;\nif (!tideStationId) {\n    node.warn('No tideStationId set');\n    msg.TideInfo = null;\n    return msg;\n}\n\nmsg.url = `https://admiraltyapi.azure-api.net/uktidalapi/api/V1/Stations/${tideStationId}/TidalEvents`;\nmsg.headers = { 'Ocp-Apim-Subscription-Key': global.get('admiraltyApiKey') || '' };\nmsg.TideInfo = null;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":220,"wires":[["2e4225ce04ddfbc5"]]},{"id":"2e4225ce04ddfbc5","type":"http request","z":"02096f24b6634fbd","name":"Fetch Tide Data","method":"GET","ret":"obj","paytoqs":"ignore","url":"","x":630,"y":220,"wires":[["ac25f10441bd87e0","0df25d29a006e42b"]]},{"id":"ac25f10441bd87e0","type":"function","z":"02096f24b6634fbd","name":"Process Tide Data","func":"// Tide processing function: all tide events for today, UTC + local times\nlet locale = global.get('locale') || 'en-GB';\nlet tideLoc = global.get('tideLoc') || 'Unknown location';\n\nif (msg.payload && Array.isArray(msg.payload) && msg.payload.length > 0) {\n    let now = new Date();\n    let today = now.toISOString().split('T')[0]; // YYYY-MM-DD\n\n    // Filter only tide events for today\n    let todaysTides = msg.payload.filter(p => p.Date.startsWith(today));\n\n    if (todaysTides.length === 0) {\n        msg.TideInfo = `(No tide data available for today at ${tideLoc})`;\n    } else {\n        // Sort by DateTime ascending\n        todaysTides.sort((a, b) => new Date(a.DateTime).getTime() - new Date(b.DateTime).getTime());\n\n        // Build concise strings for each event\n        let tideStrings = todaysTides.map(p => {\n            let utcTime = new Date(p.DateTime).toLocaleTimeString(locale, { hour: '2-digit', minute: '2-digit', timeZone: 'UTC' });\n            let localTime = new Date(p.DateTime).toLocaleTimeString(locale, { hour: '2-digit', minute: '2-digit', timeZone: global.get('timezone') || 'Europe/London' });\n            let height = p.Height.toFixed(2) + 'm';\n            return `${p.EventType.replace('Water', '')} ${utcTime} (${localTime} local) ${height}`;\n        });\n\n        msg.TideInfo = `${tideLoc}: ` + tideStrings.join(', ');\n    }\n} else {\n    msg.TideInfo = `(Tide info unavailable for ${tideLoc})`;\n}\n\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":870,"y":220,"wires":[["b57910080a45536d"]]},{"id":"b57910080a45536d","type":"function","z":"02096f24b6634fbd","name":"Assemble Sea + Tide Summary","func":"let seaPart = msg.SeaInfo || '(Sea info unavailable)';\nlet tidePart = msg.TideInfo + '. Not for navigation.' || '(Tide info unavailable)';\nmsg.payload = `${tidePart}\\n${seaPart}`;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":880,"y":300,"wires":[["b65f2738eb0d5579"]]},{"id":"b65f2738eb0d5579","type":"subflow:2c9d2a03adf9c644","z":"02096f24b6634fbd","name":"Text Chunker","x":840,"y":360,"wires":[["a72383d635b77892","6e6e8c0ae616d60b"]]},{"id":"a72383d635b77892","type":"link out","z":"02096f24b6634fbd","name":"Sea State Out","mode":"link","links":["83918985b6d1aa7a"],"x":1065,"y":360,"wires":[]},{"id":"6e6e8c0ae616d60b","type":"debug","z":"02096f24b6634fbd","name":"Final Output","active":true,"tosidebar":true,"console":false,"complete":"payload","x":850,"y":420,"wires":[]},{"id":"415a3a236e914286","type":"inject","z":"02096f24b6634fbd","name":"Test tidal call","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"true","payloadType":"bool","x":150,"y":220,"wires":[["cb90fdb3bbf9af45"]]},{"id":"0df25d29a006e42b","type":"debug","z":"02096f24b6634fbd","name":"Debug tidal data","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":560,"y":280,"wires":[]},{"id":"aee004b354b18672","type":"debug","z":"02096f24b6634fbd","name":"Debug sea data","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":560,"y":60,"wires":[]},{"id":"abed75eee1bf4a67","type":"inject","z":"02096f24b6634fbd","name":"Inject Search value","props":[{"p":"searchTerm","v":"Littlehampton","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":"","topic":"","x":190,"y":500,"wires":[["193116909daa649d"]]},{"id":"193116909daa649d","type":"function","z":"02096f24b6634fbd","name":"Build Station Query + API Key","func":"msg.requestTimeout = 10000;  // 10 seconds\n\n// User-editable search term\nlet searchTerm = msg.searchTerm || 'Littlehampton';\nlet apiKey = msg.apiKey || global.get('admiraltyApiKey'); // fallback to global\n\n// Check if API key is set\nif (!apiKey) {\n    msg.payload = `Error: Admiralty API key not set. Please configure global 'admiraltyApiKey' or provide msg.apiKey.`;\n    return msg;  // Stop here, no HTTP request will be made\n}\n\n// Construct URL\nmsg.url = `https://admiraltyapi.azure-api.net/uktidalapi/api/V1/Stations?q=${encodeURIComponent(searchTerm)}`;\n\n// Pass API key to HTTP node via msg.headers\nmsg.headers = { 'Ocp-Apim-Subscription-Key': apiKey };\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":240,"y":580,"wires":[["99f817e76334c1b8"]]},{"id":"99f817e76334c1b8","type":"http request","z":"02096f24b6634fbd","name":"Get Tidal Stations","method":"GET","ret":"obj","paytoqs":"ignore","url":"","headers":[],"x":510,"y":580,"wires":[["f7d760ea3656d9e7"]]},{"id":"f7d760ea3656d9e7","type":"function","z":"02096f24b6634fbd","name":"Parse result for station ID","func":"// Get search term (default to empty string if not provided)\nlet searchTerm = (msg.searchTerm || \"\").toLowerCase();\n\n// Check payload contains features\nif (!msg.payload || !msg.payload.features) {\n    node.error(\"No stations returned\", msg);\n    return null;\n}\n\n// Find a matching station name\nlet station = msg.payload.features.find(f =>\n    f.properties.Name && f.properties.Name.toLowerCase().includes(searchTerm)\n);\n\nlet resultText = \"\";\n\nif (station) {\n    resultText = `Search text: \"${msg.searchTerm}\". Result: ${station.properties.Name} (ID: ${station.properties.Id})`;\n} else {\n    resultText = `Search text: \"${msg.searchTerm}\". No matching tidal station found.`;\n}\n\n// Output 1 → full API results\n// Output 2 → summary string\nreturn [msg, { payload: resultText }];\n","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":610,"y":680,"wires":[["73416dd0b4bd9bc7"],["17aeb4d50720eee6"]]},{"id":"73416dd0b4bd9bc7","type":"debug","z":"02096f24b6634fbd","name":"Full results","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":850,"y":660,"wires":[]},{"id":"17aeb4d50720eee6","type":"debug","z":"02096f24b6634fbd","name":"Search results","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":860,"y":700,"wires":[]},{"id":"7c8aadacf772626f","type":"comment","z":"02096f24b6634fbd","name":"Station ID search","info":"This function helps search for a Tidal Station ID - which is needed to \nfetch its tide data.\n\n1) Set your free Admiralty dev API key in the setup function node on the first tab.\n2) Put your known station location or a pattern to search in the inject node and fire it.\n3) Once you find your ID, enter it in the setup function node on the first tab.\n\n","x":160,"y":440,"wires":[]},{"id":"2d5f4f6132a8d458","type":"comment","z":"02096f24b6634fbd","name":"Notes","info":"This flow is based on the UK Admiralty service for tide information\nand is for UK locations only. The functionality here will need to be \nadapted if another service is used.\n\nTo use the UK service requires a free API key - see:\n\nhttps://www.api.gov.uk/ukho/uk-tidal-api-discovery/\n\nhttps://admiraltyapi.developer.azure-api.net/signup\n\nIf you develop a local alternative to this tab please share via the\nMeshBop project page:\n\nhttps://github.com/linker3000/MeshBop","x":110,"y":40,"wires":[]},{"id":"c73fccf27bc4fada","type":"link in","z":"02096f24b6634fbd","name":"Sea state trigger","links":["f6a6f1452da3ef38"],"x":215,"y":100,"wires":[["fd828801553bd67c"]]},{"id":"fd32afba9a03aa5d","type":"ui-text-input","z":"3ff619ad94eee667","group":"5fa2ecc6a8fe8dcc","name":"Message input field","label":"Message","order":1,"width":"5","height":"2","topic":"text_input","topicType":"msg","mode":"textarea","tooltip":"","delay":"100","passthru":false,"sendOnDelay":true,"sendOnBlur":false,"sendOnEnter":false,"className":"","clearable":true,"sendOnClear":true,"icon":"","iconPosition":"left","iconInnerPosition":"inside","x":770,"y":120,"wires":[["5e7da09261ccfeae"]]},{"id":"5303ce2ff7eaf98e","type":"function","z":"3ff619ad94eee667","name":"Sanitize message","func":"if (typeof msg.payload === 'string') {\n    // Remove non-ASCII characters\n    msg.payload = msg.payload.replace(/[^\\x00-\\x7F]/g, '');\n    // Limit length to 198 characters\n    // Not needed in Beta 0.10 onwards msg.payload = msg.payload.slice(0, 198);\n    // Trim whitespace and drop if empty\n    if (msg.payload.trim() === '') {\n        return null; // message is empty, do not send\n    }\n}\n\n// This stops the ident message being sent after every message we type\nmsg.type = 'noident';\n\n// Get the current local time in 24-hour format\nlet currentTime = new Date().toLocaleTimeString(global.get('locale') || 'en-GB', { hour12: false });\n\n// Format the timestamp as DD-MMM HH:MM\nlet now = new Date();\nlet day = String(now.getDate()).padStart(2, '0');\nlet monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nlet month = monthNames[now.getMonth()];\n\n// Extract HH:MM from currentTime (HH:MM:SS)\nlet hhmm = currentTime.split(':').slice(0, 2).join(':');\n\n// Create second message with timestamp\nlet msgWithTimestamp = { ...msg };\nmsgWithTimestamp.payload = `~MBP~${day}-${month} ${hhmm}: ${msg.payload}`;\n\n// Return both outputs: first is original, second is with timestamp\nreturn [msg, msgWithTimestamp];\n","outputs":2,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":610,"y":260,"wires":[["7458a254e8f36f60"],["36e124301239c3ff"]]},{"id":"bc9d6bc174b4defc","type":"link out","z":"3ff619ad94eee667","name":"Message out","mode":"link","links":["83918985b6d1aa7a"],"x":945,"y":260,"wires":[]},{"id":"f4de86f7b99aa6dd","type":"trigger","z":"3ff619ad94eee667","name":"Clear text field","op1":"","op2":"","op1type":"str","op2type":"nul","duration":"10","extend":false,"overrideDelay":false,"units":"ms","reset":"","bytopic":"all","topic":"topic","outputs":1,"x":360,"y":120,"wires":[["b4e14bc6a7235db6"]]},{"id":"b4e14bc6a7235db6","type":"change","z":"3ff619ad94eee667","name":"Set empty string","rules":[{"t":"set","p":"payload","pt":"msg","to":"","tot":"str"}],"action":"","property":"","from":"","to":"","reg":false,"x":560,"y":120,"wires":[["fd32afba9a03aa5d"]]},{"id":"7458a254e8f36f60","type":"delay","z":"3ff619ad94eee667","name":"","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":810,"y":260,"wires":[["bc9d6bc174b4defc"]]},{"id":"b4857fe36c106223","type":"function","z":"3ff619ad94eee667","name":"Random test data","func":"// Helper function to generate a random string of given length\nfunction randomWord(length) {\n    const chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    let result = '';\n    for (let i = 0; i < length; i++) {\n        result += chars.charAt(Math.floor(Math.random() * chars.length));\n    }\n    return result;\n}\n\n// Generate random number of 'words' (between 3 and 7)\nconst numWords = Math.floor(Math.random() * (7 - 3 + 1)) + 3;\n\n// Generate each 'word' with random length (3 to 7 characters)\nlet words = [];\nfor (let i = 0; i < numWords; i++) {\n    const wordLength = Math.floor(Math.random() * (7 - 3 + 1)) + 3;\n    words.push(randomWord(wordLength));\n}\n\n// Combine 'words' with spaces and prepend \"AAAA: to make a test message\nmsg.payload = `AAAA: ${words.join(' ')}`;\n\nreturn msg;\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":350,"y":480,"wires":[["5b59f82f2966fe2a"]]},{"id":"2f9cd0358d8acb5e","type":"inject","z":"3ff619ad94eee667","name":"Test","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"true","payloadType":"bool","x":170,"y":480,"wires":[["b4857fe36c106223"]]},{"id":"36e124301239c3ff","type":"function","z":"3ff619ad94eee667","name":"Line buffer","func":"// Accumulate log lines in node context\nlet log = context.get('log') || [];\n\n// Check for reset\nif (msg.reset === true) {\n    log = [];  // clear the log\n} else if (msg.payload !== undefined) {\n    let line = msg.payload;\n    log.push(line);\n\n    // Keep last 50 lines (change this to adjust total buffered lines)\n    if (log.length > 75) log.shift();\n}\n\n// store updated log in context\ncontext.set('log', log);\n\n// send the entire array to the template\nreturn { payload: log };\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":650,"y":360,"wires":[["0edc81319ee0920b"]]},{"id":"4d374c139d46de61","type":"inject","z":"3ff619ad94eee667","name":"Reset buffer","props":[{"p":"reset","v":"true","vt":"bool"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","x":150,"y":300,"wires":[["d701fe1d032c95fd"]]},{"id":"d701fe1d032c95fd","type":"ui-button","z":"3ff619ad94eee667","group":"5fa2ecc6a8fe8dcc","name":"Clear messages","label":"Clear messages","order":6,"width":0,"height":0,"emulateClick":true,"tooltip":"","color":"","bgcolor":"","className":"","icon":"","iconPosition":"left","payload":"true","payloadType":"bool","topic":"reset","topicType":"msg","buttonColor":"#000052","textColor":"","iconColor":"","enableClick":true,"enablePointerdown":false,"pointerdownPayload":"","pointerdownPayloadType":"str","enablePointerup":false,"pointerupPayload":"","pointerupPayloadType":"str","x":360,"y":300,"wires":[["3d46c38e025ae024"]]},{"id":"3d46c38e025ae024","type":"change","z":"3ff619ad94eee667","name":"Reset signal","rules":[{"t":"set","p":"reset","pt":"msg","to":"true","tot":"bool"},{"t":"delete","p":"payload","pt":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":390,"y":360,"wires":[["36e124301239c3ff"]]},{"id":"5b59f82f2966fe2a","type":"function","z":"3ff619ad94eee667","name":"Format received msg","func":"// Get the current local time in 24-hour format\nlet currentTime = new Date().toLocaleTimeString(global.get('locale') || 'en-GB', { hour12: false });\n// Extract HH:MM\nlet hhmm = currentTime.split(':').slice(0, 2).join(':');\n\n// Get today's date\nconst now = new Date();\nconst day = String(now.getDate()).padStart(2, '0');\nconst monthNames = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nconst month = monthNames[now.getMonth()];\nconst year = now.getFullYear();\n\n// Ensure payload is a string, trim it, and remove non-ASCII characters\nlet messageText = \"\";\nif (typeof msg.payload === \"string\") {\n    messageText = msg.payload.trim().replace(/[^\\x20-\\x7E]/g, '');\n}\n\n// Construct final message: date + time + space + full original payload\n//msg.payload = `${day}-${month}-${year} ${hhmm} ${messageText}`;\nmsg.payload = `${day}-${month} ${hhmm}: ${messageText}`;\n\nreturn msg;\n","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":360,"y":420,"wires":[["36e124301239c3ff"]]},{"id":"7e90126dc2e1fcd6","type":"comment","z":"3ff619ad94eee667","name":"Dashboard notes","info":"The dashboard shows received messages and also has a\nfield to send messages.\n\nNB: Triggered messages from the host node are not shown\n\nIf the outbound message is longer than 198 characters,\nit will be split between separate messages. \n","x":140,"y":40,"wires":[]},{"id":"b7001ee15df634dd","type":"ui-text","z":"3ff619ad94eee667","group":"5fa2ecc6a8fe8dcc","order":2,"width":2,"height":0,"name":"Count:","label":"Characters: ","format":"{{msg.payload}}","layout":"row-left","style":true,"font":"","fontSize":"14","color":"#717171","wrapText":false,"className":"","value":"payload","valueType":"msg","x":1190,"y":180,"wires":[]},{"id":"5e7da09261ccfeae","type":"function","z":"3ff619ad94eee667","name":"Handle text input","func":"// Initialize outputs\nlet liveCountMsg = null;\nlet submitMsg = null;\n\n// Get stored text or empty\nlet currentText = flow.get(\"currentText\") || \"\";\n\n// Handle text input (string payload)\nif (typeof msg.payload === \"string\") {\n    currentText = msg.payload || \"\";\n    liveCountMsg = { payload: currentText.length }; // output 1 → live char count\n    flow.set(\"currentText\", currentText);\n}\n\n// Handle send button (boolean true)\nelse if (msg.payload === true && msg.topic !== \"initialise\") {\n    if (currentText.length > 0) {                    // only send if not empty\n        submitMsg = { payload: currentText };       // output 2 → final string\n        currentText = \"\";                            // clear stored string\n        flow.set(\"currentText\", currentText);\n        liveCountMsg = { payload: 0 };              // reset counter display\n    }\n}\n\n// Handle initialise trigger\nelse if (msg.topic === \"initialise\" && msg.payload === true) {\n    currentText = \"\";                                // clear stored string\n    flow.set(\"currentText\", currentText);\n    liveCountMsg = { payload: 0 };                  // reset counter display\n}\n\n// Return outputs: [live count, final submission]\nreturn [liveCountMsg, submitMsg];\n","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":990,"y":180,"wires":[["b7001ee15df634dd"],["5303ce2ff7eaf98e","f4de86f7b99aa6dd","5f0ef8614db2a008"]]},{"id":"5f0ef8614db2a008","type":"debug","z":"3ff619ad94eee667","name":"Message","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","statusVal":"","statusType":"auto","x":1180,"y":260,"wires":[]},{"id":"267bf015ec0abc5a","type":"ui-button","z":"3ff619ad94eee667","group":"5fa2ecc6a8fe8dcc","name":"Send","label":"Send","order":3,"width":1,"height":0,"emulateClick":false,"tooltip":"","color":"","bgcolor":"","className":"","icon":"send-circle","iconPosition":"right","payload":"true","payloadType":"bool","topic":"send_button","topicType":"msg","buttonColor":"#000052","textColor":"","iconColor":"","enableClick":true,"enablePointerdown":false,"pointerdownPayload":"","pointerdownPayloadType":"str","enablePointerup":false,"pointerupPayload":"","pointerupPayloadType":"str","x":790,"y":200,"wires":[["5e7da09261ccfeae"]]},{"id":"30d67609cad82cca","type":"link in","z":"3ff619ad94eee667","name":"Initialise","links":["38e80228b0e5038d"],"x":195,"y":180,"wires":[["f4de86f7b99aa6dd","5e7da09261ccfeae","d701fe1d032c95fd"]]},{"id":"08796a030b078272","type":"ui-text","z":"3ff619ad94eee667","group":"5fa2ecc6a8fe8dcc","order":4,"width":0,"height":0,"name":"Help message","label":"Long messages may be broken into multiple outbound messages.","format":"{{msg.payload}}","layout":"row-right","style":true,"font":"Arial,Arial,Helvetica,sans-serif","fontSize":"10","color":"#717171","wrapText":false,"className":"","value":"payload","valueType":"str","x":140,"y":80,"wires":[]},{"id":"0fb4a516080684b6","type":"ui-template","z":"3ff619ad94eee667","group":"5fa2ecc6a8fe8dcc","page":"","ui":"","name":"Dashboard window","order":5,"width":"0","height":"0","format":"<template>\n    <div ref=\"logContainer\" style=\"height:400px;\n                overflow-y:auto;\n                background:#f5f5f5;\n                padding:8px;\n                border:1px solid #ccc;\n                font-family:monospace;\n                font-size: 12px; \n                line-height: 1.2em;\n                white-space:pre-wrap;\n                display:flex;\n                flex-direction:column;\">\n        <div v-for=\"(line,index) in processedLines\" \n             :key=\"index\" \n             :style=\"{display:'block', color: line.color}\">\n            {{line.text}}\n        </div>\n    </div>\n</template>\n\n<script>\n    export default {\n        data() {\n            return {\n                processedLines: [],\n                userHasScrolled: false\n            }\n        },\n        watch: {\n            msg: {\n                handler(newVal) {\n                    if (!newVal || !newVal.payload) return;\n                    \n                    const colorLocal = newVal.colorLocal || '#000000';\n                    const colorRx = newVal.colorRx || '#303030';\n                    \n                    // Clear if empty array\n                    if (Array.isArray(newVal.payload) && newVal.payload.length === 0) {\n                        this.processedLines = [];\n                        this.userHasScrolled = false;\n                        return;\n                    }\n                    \n                    // Process array of lines\n                    if (Array.isArray(newVal.payload)) {\n                        this.processedLines = newVal.payload.map(line => {\n                            if (typeof line === 'string' && line.substring(0, 5) === '~MBP~') {\n                                return {\n                                    text: line.substring(5),\n                                    color: colorLocal\n                                };\n                            } else {\n                                return {\n                                    text: line,\n                                    color: colorRx\n                                };\n                            }\n                        });\n                    }\n                    \n                    // Only auto-scroll if user hasn't manually scrolled up\n                    this.$nextTick(() => {\n                        this.$nextTick(() => {\n                            const el = this.$refs.logContainer;\n                            if (el) {\n                                void el.offsetHeight;\n                                \n                                // Check if user is near the bottom (within 50px)\n                                const isNearBottom = el.scrollHeight - el.scrollTop - el.clientHeight < 50;\n                                \n                                // Auto-scroll only if near bottom or never scrolled\n                                if (isNearBottom || !this.userHasScrolled) {\n                                    el.scrollTop = el.scrollHeight;\n                                }\n                            }\n                        });\n                    });\n                },\n                deep: true\n            }\n        },\n        mounted() {\n            // Track manual scrolling\n            const el = this.$refs.logContainer;\n            if (el) {\n                el.addEventListener('scroll', () => {\n                    const isAtBottom = el.scrollHeight - el.scrollTop - el.clientHeight < 50;\n                    if (!isAtBottom) {\n                        this.userHasScrolled = true;\n                    } else {\n                        this.userHasScrolled = false;\n                    }\n                });\n            }\n        }\n    }\n</script>","storeOutMessages":false,"passthru":true,"resendOnRefresh":true,"templateScope":"local","className":"","x":1050,"y":360,"wires":[[]]},{"id":"c951aa4b87095d5d","type":"link in","z":"3ff619ad94eee667","name":"Dashboard in","links":["89d9e3a99fac1aeb"],"x":165,"y":420,"wires":[["5b59f82f2966fe2a"]]},{"id":"0edc81319ee0920b","type":"function","z":"3ff619ad94eee667","name":"Get colours","func":"// Get colors from global context\nconst colorLocal = global.get(\"MBPColourLocal\") || \"#000000\";\nconst colorRx = global.get(\"MBPColourRx\") || \"#303030\";\n\n// Add colors to the message\nmsg.colorLocal = colorLocal;\nmsg.colorRx = colorRx;\n\nreturn msg;","outputs":1,"timeout":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":830,"y":360,"wires":[["0fb4a516080684b6"]]},{"id":"7b89c6f062a10a67","type":"link in","z":"3ff619ad94eee667","name":"Show report on dashboard","links":["5e4a617fba5f3e2b"],"x":425,"y":540,"wires":[["36e124301239c3ff"]]},{"id":"df4b80164bc41043","type":"link in","z":"1021e6d46fa931d6","name":"Weather trigger","links":["0022bcd6eadb47f3"],"x":135,"y":100,"wires":[["94b738301321637e"]]},{"id":"b32c66c087066384","type":"debug","z":"1021e6d46fa931d6","name":"Wind Dir","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":920,"y":80,"wires":[]},{"id":"12f414a32af34ed2","type":"debug","z":"1021e6d46fa931d6","name":"Feels Like","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":930,"y":280,"wires":[]},{"id":"8b5714f674bbe024","type":"debug","z":"1021e6d46fa931d6","name":"Wind Speed","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":930,"y":120,"wires":[]},{"id":"3f1a80fc0eaa6a84","type":"debug","z":"1021e6d46fa931d6","name":"Pressure","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":920,"y":200,"wires":[]},{"id":"4e7292e8a8377b04","type":"debug","z":"1021e6d46fa931d6","name":"Summary","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":920,"y":160,"wires":[]},{"id":"9111f37d12bb75e5","type":"debug","z":"1021e6d46fa931d6","name":"Temp","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":910,"y":240,"wires":[]},{"id":"3ab530c1f690e43d","type":"debug","z":"1021e6d46fa931d6","name":"Full String","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":920,"y":360,"wires":[]},{"id":"74daf3be6e509561","type":"link out","z":"1021e6d46fa931d6","name":"Weather / Astro out","mode":"link","links":["83918985b6d1aa7a"],"x":825,"y":420,"wires":[]},{"id":"94b738301321637e","type":"trigger","z":"1021e6d46fa931d6","name":"Trigger","op1":"true","op2":"","op1type":"bool","op2type":"nul","duration":"250","extend":false,"overrideDelay":false,"units":"ms","reset":"","bytopic":"all","topic":"topic","outputs":1,"x":240,"y":100,"wires":[["13919dfc0416d2d5"]]},{"id":"916ec71f803b9284","type":"inject","z":"1021e6d46fa931d6","name":"Weather test","props":[{"p":"payload"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"true","payloadType":"bool","x":210,"y":160,"wires":[["13919dfc0416d2d5"]]},{"id":"13919dfc0416d2d5","type":"function","z":"1021e6d46fa931d6","name":"Open Meteo","func":"// Get coordinates from global context, fallback to centre of London\nlet lat = global.get('latitude') || 51.5074;\nlet lon = global.get('longitude') || -0.1278;\n\n// Set the URL with additional parameters\nmsg.url = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current=temperature_2m,apparent_temperature,weather_code,wind_speed_10m,wind_direction_10m,pressure_msl&timezone=Europe/London`;\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":430,"y":100,"wires":[["3fd6bf9f51a4a070"]]},{"id":"3fd6bf9f51a4a070","type":"http request","z":"1021e6d46fa931d6","name":"","method":"GET","ret":"txt","paytoqs":false,"url":"","persist":false,"insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":430,"y":160,"wires":[["e93436b1e0cecbfc"]]},{"id":"e93436b1e0cecbfc","type":"function","z":"1021e6d46fa931d6","name":"Weather Info Open-Meteo","func":"// Debug: Check what we're receiving\n// node.warn(\"Full message: \" + JSON.stringify(msg));\n// node.warn(\"Payload type: \" + typeof msg.payload);\n// node.warn(\"Payload: \" + JSON.stringify(msg.payload));\n\n// Handle different response formats\nvar weatherData;\nif (typeof msg.payload === \"string\") {\n    // If it's a string, parse it as JSON\n    try {\n        weatherData = JSON.parse(msg.payload);\n    } catch (e) {\n        node.error(\"Failed to parse JSON: \" + e.message);\n        return null;\n    }\n} else if (typeof msg.payload === \"object\") {\n    // If it's already an object, use it directly\n    weatherData = msg.payload;\n} else {\n    node.error(\"Unexpected payload type: \" + typeof msg.payload);\n    return null;\n}\n\n// Check if we have the expected structure\nif (!weatherData || !weatherData.current) {\n    node.error(\"Invalid payload structure. Expected current weather data\");\n    node.error(\"Available keys: \" + Object.keys(weatherData || {}));\n    return null;\n}\n\nvar airPressure = weatherData.current.pressure_msl;\nvar windAngle = weatherData.current.wind_direction_10m;\nvar windCompass = {};\nvar windSpeed = {};\nvar weatherDescription = {};\nvar airTemperature = {};\nvar feelsLikeTemp = {};\nvar fullWeatherString = {};\nvar msgPressure = {};\nvar weatherCodeOutput = {};\n\nvar compassDirections = [\"North\", \"North-East\", \"East\", \"South-East\", \"South\", \"South-West\", \"West\", \"North-West\"];\n\nvar weatherDescriptions = {\n    0: \"Clear sky\",\n    1: \"Mainly clear\",\n    2: \"Partly cloudy\",\n    3: \"Overcast\",\n    45: \"Fog\",\n    48: \"Depositing rime fog\",\n    51: \"Light drizzle\",\n    53: \"Moderate drizzle\",\n    55: \"Dense drizzle\",\n    61: \"Slight rain\",\n    63: \"Moderate rain\",\n    65: \"Heavy rain\",\n    71: \"Slight snow\",\n    73: \"Moderate snow\",\n    75: \"Heavy snow\",\n    95: \"Thunderstorm\"\n};\n\n// Calculate direction and store in object\nvar windDirectionText = compassDirections[Math.round(((windAngle %= 360) < 0 ? windAngle + 360 : windAngle) / 45) % 8];\nwindCompass = { payload: windDirectionText };\n\n// Wind speed in mph, rounded to nearest 0.5\nwindSpeed = {\n    payload: Math.round(weatherData.current.wind_speed_10m * 0.621371 * 2) / 2\n};\n\nmsgPressure.payload = airPressure;\nairTemperature.payload = weatherData.current.temperature_2m.toFixed(1) + \"C\";\n\n// Handle apparent temperature\nfeelsLikeTemp.payload = weatherData.current.apparent_temperature ?\n    weatherData.current.apparent_temperature.toFixed(1) + \"C\" :\n    airTemperature.payload;\n\n// Get weather description from code\nvar weatherCode = weatherData.current.weather_code;\nweatherDescription.payload = weatherDescriptions[weatherCode] || (\"Weather code \" + weatherCode);\n\n// Weather code as separate output\nweatherCodeOutput.payload = weatherCode;\n\n// Assemble final string\nvar locationName = global.get(\"location\") || \"London\";\nfullWeatherString.payload = locationName + \": \" +\n    weatherDescription.payload +\n    '. Temp: ' + airTemperature.payload +\n    '. Feels like: ' + feelsLikeTemp.payload +\n    '. Wind: ' + windSpeed.payload + 'mph ' + windCompass.payload +\n    '. Pressure: ' + msgPressure.payload + 'mb ' +\n    '(Data from Open-Meteo).';\n\nreturn [windCompass, windSpeed, weatherDescription, msgPressure, airTemperature, feelsLikeTemp, weatherCodeOutput,fullWeatherString];","outputs":8,"noerr":0,"initialize":"","finalize":"","libs":[],"x":650,"y":160,"wires":[["b32c66c087066384"],["8b5714f674bbe024"],["4e7292e8a8377b04"],["3f1a80fc0eaa6a84"],["9111f37d12bb75e5"],["12f414a32af34ed2"],["0a82e879e6f0d13f"],["3ab530c1f690e43d","74daf3be6e509561"]]},{"id":"0a82e879e6f0d13f","type":"debug","z":"1021e6d46fa931d6","name":"Weather Code","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","statusVal":"","statusType":"auto","x":940,"y":320,"wires":[]},{"id":"9d7510a082a2cee0","type":"comment","z":"1021e6d46fa931d6","name":"Open Meteo note","info":"Provided here as an alternative to the Met Office service\n\nOpen Meteo imposes its own rate limiting for fetching the weather.\n\nIt is also a very busy API and sometimes requests do not get processed.\n\nThis limit can be hit easily during testing, so if no weather info\nis returned or the http request stalls for a while, wait and try again\nbefore suspecting there is an issue with any flow or logic.\n\nThe default weather message uses the 'full string' output from the\nfunction block, with the component parts available on the other outputs.","x":120,"y":40,"wires":[]},{"id":"74a2913fabeabf63","type":"global-config","env":[],"modules":{"node-red-node-serialport":"2.0.3","@flowfuse/node-red-dashboard":"1.28.0","node-red-node-email":"3.1.0","node-red-contrib-astrodata":"0.0.4","node-red-contrib-feedparser-simple":"0.0.2"}}]